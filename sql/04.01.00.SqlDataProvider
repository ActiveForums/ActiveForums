IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Members]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Members]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forum_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forum_Save]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forums_RepairSort]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forums_RepairSort]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forums_MoveForum]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forums_MoveForum]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Groups_MoveGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Groups_MoveGroup]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Search_Standard]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Search_Standard]
GO

ALTER TABLE {databaseOwner}{objectQualifier}activeforums_UserProfiles ADD
	Bio nvarchar(2000) NOT NULL CONSTRAINT DF_{objectQualifier}activeforums_UserProfiles_Bio DEFAULT ('')
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Security_Delete]
@SecuredId int,
@ObjectId int,
@SecureAction int,
@SecureType int,
@ObjectType int
AS
DELETE FROM {databaseOwner}{objectQualifier}activeForums_Security 
WHERE  SecuredId = @SecuredId AND ObjectId = @ObjectId AND SecureType = @SecureType AND ObjectType = @ObjectType
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
	@PortalId int,
	@ModuleId int,
	@UserId int
AS
BEGIN
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_Create @PortalId, @ModuleId, @UserId
	SET NOCOUNT ON
	SELECT		P.ProfileId, P.UserId, P.ModuleId, P.PortalId, P.TopicCount, P.ReplyCount, P.ViewCount, 
				P.AnswerCount, P.RewardPoints, P.UserCaption, P.DateCreated, 
                P.DateUpdated, P.DateLastActivity, P.Signature, P.SignatureDisabled, 
				P.TrustLevel, P.AdminWatch, P.AttachDisabled, P.Avatar, P.AvatarType, P.AvatarDisabled, 
				P.PrefDefaultSort, P.PrefDefaultShowReplies, P.PrefJumpLastPost, P.PrefTopicSubscribe,
				P.PrefSubscriptionType, P.PrefUseAjax, P.PrefEmailFormat, P.PrefBlockAvatars, 
				P.PrefBlockSignatures, P.PrefPageSize, P.Yahoo, P.MSN, P.ICQ, P.AOL, 
				P.Occupation, P.Location, P.Interests, P.WebSite, P.Badges, 
				IsNull(U.Username,'') as UserName, IsNull(U.FirstName,'') as FirstName, 
				IsNull(U.LastName,'') as LastName, IsNull(U.Email,'') as Email, IsNull(U.DisplayName,'') as DisplayName,
				IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GetDate()) <=1 THEN 1 ELSE 0 END),
				"Roles" = {databaseOwner}{objectQualifier}activeforums_UserProfiles_GetUserRoles(@UserId,@PortalId,GetDate()), IsNull(P.DateLastPost,'') as DateLastPost
	FROM        {databaseOwner}{objectQualifier}activeforums_UserProfiles AS P WITH (NOLOCK) LEFT OUTER JOIN
                {databaseOwner}{objectQualifier}Users AS U WITH (NOLOCK) ON P.UserId = U.UserID
	WHERE P.UserId = @UserId AND P.PortalId = @PortalId
END
BEGIN
	exec {databaseOwner}{objectQualifier}activeforums_Security_GetByUser @PortalId, 0, @UserId
END
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Forum_Save
@PortalId int,
@ForumId int,
@ModuleId int,
@ForumGroupId int,
@ParentForumId int,
@ForumName nvarchar(255),
@ForumDesc nvarchar(2000),
@SortOrder int,
@Active bit,
@Hidden bit,
@ForumSettingsKey varchar(255) = ''
AS

IF EXISTS (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId AND ModuleId = @ModuleId)
	BEGIN
	DECLARE @curGroupId int 
	DECLARE @curParentForumId int
	BEGIN
	IF @ForumSettingsKey = ''
		SET @ForumSettingsKey = (SELECT ForumSettingsKey FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
	END
		SET @curGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
		SET @curParentForumId = (SELECT ParentForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
		
	IF @curGroupId <> @ForumGroupId OR @curParentForumId <> @ParentForumId
		BEGIN
		DECLARE @MaxSort int
		SET @MaxSort = (SELECT MAX(SortOrder) from {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ParentForumId = @ParentForumId AND ForumGroupId = @ForumGroupId)
		IF @MaxSort IS NULL
			SET @MaxSort = 0
		ELSE
			SET @MaxSort = @MaxSort + 1
		
		UPDATE {databaseOwner}{objectQualifier}activeforums_forums SET SortOrder = @MaxSort, ForumGroupId = @ForumGroupId WHERE ForumId = @ForumId --and ForumGroupID = @ForumGroupID
		exec {databaseOwner}{objectQualifier}activeforums_Forums_RepairSort @curGroupId, @curParentForumId
		exec {databaseOwner}{objectQualifier}activeforums_Forums_RepairSort @ForumGroupID, @ParentForumId
		END
	UPDATE {databaseOwner}{objectQualifier}activeforums_Forums
	SET PortalId = @PortalId, ForumGroupId = @ForumGroupId, ParentForumId = @ParentForumId, ForumName = @ForumName,
	ForumDesc = @ForumDesc,  Active = @Active, Hidden = @Hidden, DateUpdated = GetDate(), ForumSettingsKey = @ForumSettingsKey, ForumSecurityKey = @ForumSettingsKey
	WHERE ForumId = @ForumId AND ModuleId = @ModuleId
	END
	
ELSE
	BEGIN
	SELECT @SortOrder = (Max(SortOrder) + 1) From {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleID=@ModuleID and ForumGroupID = @ForumGroupID 
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_Forums
		(PortalId, ModuleId, ForumGroupId, ParentForumId, ForumName, ForumDesc, SortOrder, Active, Hidden)
		VALUES
		(@PortalId, @ModuleId, @ForumGroupId, @ParentForumId, @ForumName, @ForumDesc, IsNull(@SortOrder,0), @Active, @Hidden)
	SET @ForumId = SCOPE_IDENTITY()
		BEGIN
			IF @ForumSettingsKey = ''
				UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET ForumSettingsKey = 'F:' + CAST(@ForumId as varchar(50)), ForumSecurityKey = 'F:' + CAST(@ForumId as varchar(50)) WHERE ForumId = @ForumId
			ELSE
				UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET ForumSettingsKey = @ForumSettingsKey, ForumSecurityKey = @ForumSettingsKey WHERE ForumId = @ForumId
		END
	END
SELECT @ForumId
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Forums_RepairSort(@ForumGroupID int, @ParentForumId int = 0)
 AS
	DECLARE @ForumID int
	DECLARE @RowNum int
	DECLARE ForumList cursor for
	SELECT ForumID FROM {databaseOwner}{objectQualifier}activeforums_Forums Where ForumGroupID = @ForumGroupID AND ParentForumId = @ParentForumId Order By SortOrder
	OPEN ForumList
	FETCH NEXT FROM ForumList 
	INTO @ForumID
	set @RowNum = 0 
	WHILE @@FETCH_STATUS = 0
	BEGIN
	  UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET SortOrder = @RowNum WHERE ForumID = @ForumID
		set @RowNum = @RowNum + 1
	  FETCH NEXT FROM ForumList 
	    INTO @ForumID
	END
	CLOSE ForumList
	DEALLOCATE ForumList
GO
CREATE PROCEDURE  {databaseOwner}{objectQualifier}activeforums_Forums_MoveForum(
@ModuleId int,
@ForumID int, 
@SortDirection int
)
AS
BEGIN
DECLARE @currIndex int
DECLARE @newIndex int
DECLARE @tmpForumId int
DECLARE @forumGroupId int
DECLARE @ParentForumId int
SET @ParentForumId = (SELECT ParentForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ForumId = @ForumId)
SET @currIndex = (SELECT SortOrder FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId and ForumId = @ForumId)
SET @forumGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId and ForumId = @ForumId)
SET @tmpForumId = (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ParentForumId = @ParentForumId AND ForumGroupId = @ForumGroupId AND SortOrder = (@currIndex + @SortDirection))
IF @tmpForumId >= 0 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET SortOrder = (@currIndex + @SortDirection) WHERE ModuleId = @ModuleId AND ForumId = @ForumId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET SortOrder = @currIndex WHERE ModuleId = @ModuleId AND ForumId = @tmpForumId
	END

END
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Groups_MoveGroup
@ModuleId int,
@ForumGroupId int,
@SortDirection int
AS
BEGIN
DECLARE @currIndex int
DECLARE @newIndex int
DECLARE @tmpGroupId int
SET @currIndex = (SELECT SortOrder FROM {databaseOwner}{objectQualifier}activeforums_Groups WHERE ModuleId = @ModuleId and ForumGroupId = @ForumGroupId)
SET @tmpGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Groups WHERE ModuleId = @ModuleId AND SortOrder = (@currIndex + @SortDirection))
IF @tmpGroupId >= 0 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Groups SET SortOrder = (@currIndex + @SortDirection) WHERE ModuleId = @ModuleId AND ForumGroupId = @ForumGroupId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Groups SET SortOrder = @currIndex WHERE ModuleId = @ModuleId AND ForumGroupId = @tmpGroupId
	END
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Search_Standard
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@ForumId int,
	@IsSuperUser bit,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@SearchString nvarchar(200), 
	@MatchType int = 0,
	@SearchField int = 0,--0=Subject&Body, 1= Subject, 2=Body
	@Timespan int = 0,
	@AuthorId int = 0,
	@Author nvarchar(200),
	@Forums varchar(8000),
	@Tags nvarchar(400)
as
IF @AuthorId = 0 AND @Author != ''
	BEGIN
		DECLARE @DisplayOpt varchar(50)
		SELECT @DisplayOpt = SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = @ModuleId AND SettingName = 'USERNAMEDISPLAY'
		If @DisplayOpt = 'Fullname' 
			SET @DisplayOpt = 'FirstName  + '' '' + LastName '
		DECLARE @sql nvarchar(2000)
		SET @sql = N'SELECT @RET = UserId FROM {databaseOwner}{objectQualifier}Users WHERE ' + @DisplayOpt + ' = ''' + @Author + ''''
		print @sql
		exec sp_executesql @stmt = @sql, @params = N'@RET as INT OUTPUT', @ret = @AuthorId OUTPUT;
		if @AuthorId = 0 SET @AuthorId = -1
	END
DECLARE @RowCount int
-- SeachString:  String of 1 or more search terms, all separated by spaces
-- MatchType: 0=match any, 1 =match all, 2 = exact match of entire expression only
-- Results are returned in order of relevance
declare @i1 int;
declare @i2 int;

declare @Word nvarchar(200);
declare @Words table (Word nvarchar(200) not null);
declare @WordCount as integer;

set nocount on
-- Parse the SearchString to extract all words:
if (@SearchString <> '') 
BEGIN
if (@MatchType != 2)
  begin
  set @SearchString = ' ' + @SearchString  + ' ';
  set @i1 = 1;
  while (@i1 != 0)
    begin
    set @i2=charindex(' ', @SearchString, @i1+1)
    if (@i2 != 0)
      begin
      set @Word = rtrim(ltrim(substring(@SearchString, @i1+1, @i2-@i1)))
      if @Word != '' insert into @Words select @Word
		if (@MatchType != 1)
		if UPPER(RIGHT(@Word,1)) = 'S' insert into @Words select LEFT(@Word,LEN(@Word)-1) ELSE insert into @Words select @Word + 's'
      end
    set @i1 = @i2
    end
  end
else
  insert into @Words select ltrim(rtrim(@SearchString))

-- Get the total # of words:
set @WordCount = (select count(*) from @Words)
END
-- Return Results in order of relevance:
DECLARE @tmpResults TABLE (topicid int unique,rownum int, matchpct decimal(15,4))

INSERT INTO @tmpResults(topicid, matchpct,rownum)
		SELECT TopicId, hits.MatchPct, ROW_NUMBER() OVER (ORDER BY hits.MatchPct DESC, DateCreated DESC) as RowRank FROM
				(
					SELECT  t.topicid,t.datecreated,t.contentid			
					FROM         {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN 
					{databaseOwner}{objectQualifier}activeforums_Forums as F ON T.ForumId = F.ForumId INNER JOIN
					{databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId LEFT OUTER JOIN 
					
					(
						SELECT DISTINCT S.SecurityKey, MAX(Convert(int,S.[Read]))as [Read]
						FROM	{databaseOwner}{objectQualifier}activeforums_Security AS S LEFT OUTER JOIN
								{databaseOwner}{objectQualifier}UserRoles AS R ON S.ObjectId = R.RoleID
						WHERE ((S.[Read] = 1 AND S.ObjectType = 0 AND S.SecureType = 1) 
							AND  
							(R.EffectiveDate IS NULL) AND (R.ExpiryDate >= GETDATE()) OR
							(R.EffectiveDate IS NULL) AND (R.ExpiryDate IS NULL) OR
							(R.EffectiveDate <= GETDATE()) AND (R.ExpiryDate IS NULL) OR
							(R.EffectiveDate <= GETDATE()) AND (R.ExpiryDate >= GETDATE()))
							AND (R.UserId = @UserId OR ((@UserId = -1 AND S.ObjectId = -3) OR (@UserId = -1 AND S.ObjectId = -1)))
							GROUP BY s.SecurityKey
					) sec ON F.ForumSecurityKey = sec.SecurityKey
						WHERE (sec.[Read] = 1 or @IsSuperUser = 1) AND 
						T.ReplyId = 0 AND T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND 
						(@TimeSpan = 0 OR DATEDIFF(hh,T.DateCreated,GetDate()) <= @TimeSpan) AND
						(@AuthorId = 0 OR T.AuthorId = @AuthorId) AND
						(@ForumId <= 0 OR T.ForumId =  @ForumId) AND
						(@Tags = '' OR (@Tags <> '' AND T.TopicId IN (
														SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags INNER JOIN
														{databaseOwner}{objectQualifier}activeforums_Topics_Tags ON {databaseOwner}{objectQualifier}activeforums_Tags.TagId = {databaseOwner}{objectQualifier}activeforums_Topics_Tags.TagId
														WHERE	{databaseOwner}{objectQualifier}activeforums_Tags.TagName = @Tags))) AND
						(@SearchString <> '' OR @Tags <> '' OR @AuthorId > 0) AND
						(@Forums = '' OR T.ForumId IN (SELECT id FROM {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':')))
			) as results LEFT OUTER JOIN
				(
					SELECT ContentId as cid, MatchPct FROM (SELECT C.ContentId, Count(*)  * 1.0 / @WordCount as MatchPct 
					FROM {databaseOwner}{objectQualifier}activeforums_Content C INNER JOIN 
					@Words W on 
					CASE @SearchField
									WHEN 0 THEN ' ' + Convert(nvarchar(max),c.Body) + ' ' + c.Subject + ' '
									WHEN 1 THEN ' ' + c.Subject + ' '
									WHEN 2 THEN ' ' + Convert(nvarchar(max),c.Body) + ' '
								END like '%[^a-z]' + Word + '[^a-z]%'
							GROUP BY ContentId) as hits
							WHERE MatchPct = 1 or @MatchType <> 1 
				) as hits ON results.ContentId = hits.cid
		

SELECT Count(*) from @tmpResults WHERE (MatchPct IS NOT NULL AND @SearchString <> '' OR @Tags <> '' OR @AuthorId > 0)
SELECT * FROM         {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
					@tmpResults AS r ON T.TopicId = r.TopicId
WHERE ReplyId = 0 AND rownum > @RowIndex AND rownum <= (@RowIndex + @MaxRows) AND (MatchPct IS NOT NULL AND @SearchString <> '' OR @Tags <> '' OR @AuthorId > 0)
ORDER BY MatchPct DESC, T.DateCreated DESC
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Forums_Maintenance
(
	@ForumId int,
	@OlderThanTimeFrame int,
	@LastActivityTimeFrame int,
	@ByUserId int,
	@WithoutReplies bit,
	@TestRun bit,
	@DelBehavior int
)
AS

		DECLARE @Topics TABLE(topicid int)
		INSERT INTO @Topics (topicid)
			SELECT t.TopicId FROM
				{databaseOwner}{objectQualifier}activeforums_Topics as t INNER JOIN 
				{databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = t.ContentId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on ft.topicid = t.topicid LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on r.replyid = ft.lastreplyid LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on rc.contentid = r.contentid
			WHERE ft.forumid = @ForumId AND t.IsDeleted = 0 AND 
				(
				(@OlderThanTimeFrame = 0 OR (DATEDIFF(dd,c.DateCreated,GETDATE()) > @OlderThanTimeFrame AND @OlderThanTimeFrame > 0))
				AND
				(@LastActivityTimeFrame = 0 OR
						(
							(DATEDIFF(dd,rc.DateCreated,GETDATE()) > @LastActivityTimeFrame AND @LastActivityTimeFrame > 0 AND @WithoutReplies = 0)
							OR
							(rc.DateCreated IS NULL AND @LastActivityTimeFrame > 0 AND @WithoutReplies = 0)
							
						)
					)
				AND
				(@ByUserId = 0 OR (c.AuthorId = @ByUserId AND @ByUserId > 0))
				AND
				(
					@WithoutReplies = 0
					OR 
					(
						(ft.lastreplyid IS NULL AND @WithoutReplies = 1)
					)
				)
			)
		DECLARE @topicCount int
		SET @topicCount = (SELECT Count(*) from @topics)
		IF @TestRun = 0 AND @topicCount > 0 
			BEGIN
			DECLARE topics_curs cursor for SELECT topicid from @topics
			DECLARE @topicid int
			OPEN topics_curs
				fetch next from topics_curs into @topicid
					while (@@fetch_status = 0)
					BEGIN
					exec {databaseOwner}{objectQualifier}activeforums_Topics_Delete @ForumId, @topicid, @DelBehavior, 0
					fetch next from topics_curs into @topicid
					END
			close topics_curs
			deallocate topics_curs
		
			DECLARE @LastPostId int
			DECLARE @TotalTopics int
			DECLARE @TotalReplies int
			SET @TotalTopics = (SELECT Count(TopicId) FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView WHERE ForumId = @ForumId)
			SET @TotalReplies = (SELECT Count(ReplyId) FROM {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies WHERE ForumId = @ForumId)
			SELECT TOP 1 @LastPostId = (CASE WHEN LastReplyId = 0 THEN TopicId ELSE LastReplyId END) FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView WHERE ForumId = @ForumId ORDER BY LastReplyDate DESC
			UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET LastPostId = IsNull(@LastPostId,0), 
			TotalTopics = IsNull(@TotalTopics,0),
			TotalReplies = IsNull(@TotalReplies,0)
			WHERE ForumId = @ForumId
			exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @ForumId
			SELECT @topicCount
			END
			
		ELSE
			SELECT @topicCount
GO
