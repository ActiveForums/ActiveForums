ALTER TABLE {databaseOwner}{objectQualifier}activeforums_Forums ADD
	PermissionsId int NOT NULL CONSTRAINT DF_{objectQualifier}activeforums_Forums_PermissionsId DEFAULT -1
GO
ALTER TABLE {databaseOwner}{objectQualifier}activeforums_Groups ADD
	PermissionsId int NOT NULL CONSTRAINT DF_{objectQualifier}activeforums_Groups_PermissionsId DEFAULT -1
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Permissions]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions]
GO
CREATE TABLE {databaseOwner}[{objectQualifier}activeforums_Permissions](
	[PermissionsId] [int] IDENTITY(1,1) NOT NULL,
	[CanView] [nvarchar](1000) NULL,
	[CanRead] [nvarchar](1000) NULL,
	[CanCreate] [nvarchar](1000) NULL,
	[CanReply] [nvarchar](1000) NULL,
	[CanEdit] [nvarchar](1000) NULL,
	[CanDelete] [nvarchar](1000) NULL,
	[CanLock] [nvarchar](1000) NULL,
	[CanPin] [nvarchar](1000) NULL,
	[CanAttach] [nvarchar](1000) NULL,
	[CanPoll] [nvarchar](1000) NULL,
	[CanBlock] [nvarchar](1000) NULL,
	[CanTrust] [nvarchar](1000) NULL,
	[CanSubscribe] [nvarchar](1000) NULL,
	[CanAnnounce] [nvarchar](1000) NULL,
	[CanModApprove] [nvarchar](1000) NULL,
	[CanModMove] [nvarchar](1000) NULL,
	[CanModSplit] [nvarchar](1000) NULL,
	[CanModDelete] [nvarchar](1000) NULL,
	[CanModUser] [nvarchar](1000) NULL,
	[CanModEdit] [nvarchar](1000) NULL,
	[CanModLock] [nvarchar](1000) NULL,
	[CanModPin] [nvarchar](1000) NULL,
 CONSTRAINT [PK_{objectQualifier}activeforums_Permissions] PRIMARY KEY CLUSTERED 
(
	[PermissionsId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) 
) 
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumGet]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumGet]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_ForumView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_ForumView]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Groups_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Groups_Get]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_ActiveView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_ActiveView]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forum_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forum_Save]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicView]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_NotRead]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_NotRead]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_UnansweredView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_UnansweredView]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Groups_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Groups_Save]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumGet]
@PortalId int,
@ModuleId int,
@ForumId int
AS 
SELECT     F.ForumId, F.ModuleId, F.ForumGroupId, F.ParentForumId, F.ForumName, F.ForumDesc, F.SortOrder, F.Active, F.Hidden, F.TotalTopics, 
                      F.TotalReplies, F.LastTopicId, F.LastReplyId, F.ForumSettingsKey, F.ForumSecurityKey, G.GroupName, ISNULL(P.ForumName, '') AS ParentForumName, pf.*,
                      InheritSecurity = (CASE WHEN G.PermissionsId = F.PermissionsId THEN 1 ELSE 0 END)
FROM         {databaseOwner}{objectQualifier}activeforums_Forums AS F INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Permissions as pf on pf.PermissionsId = f.PermissionsId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Groups AS G ON F.ForumGroupId = G.ForumGroupId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Forums AS P ON F.ParentForumId = P.ForumId
                      
WHERE     (F.ForumId = @ForumId)
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_ForumView]
@PortalId int,
@ModuleId int,
@UserId int,
@IsSuperUser bit = 0,
@ParentForumId int = -1,
@ForumIds nvarchar(2000) = ''
AS
SELECT         G.ForumGroupId, G.ModuleId, G.GroupName, F.ForumId, F.ForumName, F.ForumDesc, F.Active AS ForumActive, F.Hidden AS ForumHidden, F.TotalTopics, 
					F.TotalReplies, F.ParentForumId, G.SortOrder AS GroupSort, F.SortOrder AS ForumSort, G.Active AS GroupActive, G.Hidden AS GroupHidden,
					F.LastTopicId,
					F.LastReplyId,
					IsNull(F.LastPostSubject,'') as LastPostSubject,
					IsNull(F.LastPostAuthorName,'') as LastPostAuthorName,
					IsNull(F.LastPostAuthorId,-1) as LastPostAuthorId,
					IsNull(F.LastPostDate,'') as LastPostDate,
					
					LastRead = IsNull((SELECT LastAccessDate FROM {databaseOwner}{objectQualifier}activeforums_Forums_Tracking WHERE UserId = @UserId AND ForumId = F.ForumId),''),
					"AllowRSS" = (SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE ModuleId = F.ModuleId AND GroupKey = F.ForumSettingsKey AND SettingName = 'ALLOWRSS'),
					P.*
					
										
	FROM         
		{databaseOwner}{objectQualifier}activeforums_Groups AS G INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Forums AS F ON G.ForumGroupId = F.ForumGroupId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Permissions as p ON f.PermissionsId = p.PermissionsId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as ft ON ft.id = f.ForumId
					 
	WHERE G.ModuleId = @ModuleId AND (G.Active = 1 AND F.Active = 1) AND (@ParentForumId = -1 OR (@ParentForumId > 0 AND F.ParentForumId = @ParentForumId))
	ORDER BY GroupSort, ForumSort

If @UserId > 0 AND @ParentForumId =-1
	BEGIN
	SELECT TopicCount, ReplyCount, ViewCount, AnswerCount, RewardPoints, DateLastActivity, 
                      DateLastPost, SignatureDisabled, TrustLevel, AdminWatch, AttachDisabled, PrefDefaultSort, PrefDefaultShowReplies, 
                      PrefJumpLastPost, PrefTopicSubscribe, PrefSubscriptionType, PrefUseAjax, PrefEmailFormat, PrefBlockAvatars, PrefBlockSignatures, PrefPageSize
                      
	FROM         {databaseOwner}{objectQualifier}activeforums_UserProfiles WHERE UserId = @UserId AND PortalId = @PortalId
	END



GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Groups_Get]
@ModuleId int,
@ForumGroupId int
AS
SELECT     g.ForumGroupId, g.ModuleId, g.GroupName, g.SortOrder, g.GroupSettingsKey, g.GroupSecurityKey, g.Active, g.Hidden, p.*
FROM         {databaseOwner}{objectQualifier}activeforums_Groups as g INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as p on p.PermissionsId = g.PermissionsId
WHERE ForumGroupId = @ForumGroupId
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_ActiveView]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@IsSuperUser bit = 0,
	@TimeFrame int,
	@ForumIds nvarchar(1000)
AS
DECLARE @RecordCount int
SET @RecordCount = (Select Count(*) from {databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T INNER JOIN 
	{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as ft ON ft.id = t.ForumId INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_Forums as F on ft.id = F.ForumId INNER JOIN 
	{databaseOwner}{objectQualifier}activeforums_Permissions as p on p.PermissionsId = f.PermissionsId
WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND DATEDIFF(mi,t.LastReplyDate,GetDate())<= @TimeFrame)

SELECT ForumId, ForumName, LastReplyId, TopicId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsAnnounce, AnnounceStart, AnnounceEnd,
		TopicType, [Subject], Summary, AuthorId, AuthorName, Body, DateCreated, LastReplySubject, LastReplySummary, LastReplyAuthorId,
		LastReplyAuthorName, LastReplyUserName, LastReplyFirstName, LastReplyLastName, LastReplyDisplayName, LastReplyDate, AuthorUserName,
		AuthorFirstName, AuthorLastName, AuthorDisplayName, LastReplyRead, IsRead, TopicRating, @RecordCount as RecordCount
	FROM
	(SELECT     T.ForumId, T.ForumName, T.LastReplyId, T.TopicId, T.ViewCount, T.ReplyCount, T.IsLocked, T.IsPinned, IsNull(T.TopicIcon,'') as TopicIcon, T.StatusId, T.IsAnnounce, T.AnnounceStart, T.AnnounceEnd, 
                      T.TopicType, T.Subject, T.Summary, T.AuthorId, T.AuthorName, T.Body, T.DateCreated, T.LastReplySubject, T.LastReplySummary, T.LastReplyAuthorId, 
                      T.LastReplyAuthorName, T.LastReplyUsername, T.LastReplyFirstName, T.LastReplyLastName, T.LastReplyDisplayName, T.LastReplyDate, T.AuthorUsername, 
                      T.AuthorFirstName, T.AuthorLastName, T.AuthorDisplayName,
                      (CASE WHEN TT.LastReplyId < T.LastReplyId THEN TT.LastReplyId ELSE 0 END) AS LastReplyRead,
						(CASE WHEN (IsNull(TT.TopicId,0) = 0 AND ISNULL(FT.MaxTopicRead,0) < T.TopicId) OR 
						(ISNULL(FT.MaxTopicRead,0) < T.TopicID AND (ISNULL(FT.MaxReplyRead,0) = 0 OR ISNULL(FT.MaxReplyRead,0) < T.LastReplyId)) OR
						(ISNULL(FT.MaxTopicRead,0) < IsNull(T.TopicId,0) AND ISNULL(FT.MaxReplyRead,0) < ISNULL(T.LastReplyId,0) AND IsNull(TT.TopicId,0) > 0 AND IsNull(TT.LastReplyId,0) < T.LastReplyId) THEN 0 ELSE 1 END) as IsRead,
                          (SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (
							ORDER BY 
								CASE
									WHEN @Sort = 'DESC' THEN T.LastReplyDate END DESC,
								CASE 
									WHEN @Sort = 'ASC' THEN T.LastReplyDate END ASC
								
							) as RowRank
		FROM	{databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T  INNER JOIN 
	{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as fids ON fids.id = t.ForumId INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_Forums as F on fids.id = F.ForumId INNER JOIN 
	{databaseOwner}{objectQualifier}activeforums_Permissions as p on p.PermissionsId = f.PermissionsId LEFT OUTER JOIN
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}activeforums_Forums_Tracking AS FT ON T.ForumId = FT.ForumId AND FT.UserId = @UserId 
		WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND  DATEDIFF(mi,t.LastReplyDate,GetDate())<= @TimeFrame 
	) AS TopicsWithRowNumbers
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)

GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsView]
@PortalId int,
@ModuleId int,
@ForumId int,
@UserId int,
@RowIndex int = 0, 
@MaxRows int = 20,
@IsSuperUser bit = 0,
@SortColumn nvarchar(25) = 'ReplyCreated'
AS
--Forum/Group Info

BEGIN
	SELECT v.ForumName, v.GroupName, v.ForumGroupId, v.ForumDesc,
		TopicsTemplateId = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'TOPICSTEMPLATEID' and GroupKey = v.ForumSettingsKey),0),
		AllowRSS = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'ALLOWRSS' and GroupKey = v.ForumSettingsKey),0),
		TopicRowCount = IsNull((SELECT Count(t.TopicId) FROM {databaseOwner}{objectQualifier}activeforums_Topics as t inner join {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid WHERE ft.ForumId = @ForumId AND t.IsApproved = 1 and t.IsDeleted = 0),0),
		IsSubscribedForum = IsNull((SELECT ID FROM {databaseOwner}{objectQualifier}activeforums_Subscriptions WHERE ForumId = @ForumId AND TopicId = 0 AND UserId = @UserId),0)
		
		 FROM {databaseOwner}{objectQualifier}vw_activeforums_GroupForum as v WHERE v.ForumActive = 1 AND v.ModuleId = @ModuleId AND v.ForumId = @ForumId
END
--Forum Security
BEGIN
	Select p.* from {databaseOwner}{objectQualifier}activeforums_Permissions as p INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.PermissionsId = p.PermissionsId WHERE f.ForumId = @ForumId
	
END
--Get Sub Forums
 exec {databaseOwner}{objectQualifier}activeforums_UI_ForumView @PortalId, @ModuleId,@UserId,@IsSuperUser, @ForumId

--Get Topics

SELECT 
	ForumId,
	LastReplyId,
	TopicId,
	ViewCount,
	ReplyCount,
	IsLocked,
	IsPinned,
	TopicIcon,
	StatusId,
	IsAnnounce,
	AnnounceStart,
	AnnounceEnd,
	TopicType,
	[Subject],
	Summary,
	AuthorId,
	AuthorName,
	Body,
	DateCreated,
	AuthorUserName,
	AuthorFirstName,
	AuthorLastName,
	AuthorDisplayName,
	LastReplySubject,
	LastReplySummary,
	LastReplyAuthorId,
	LastReplyAuthorName,
	LastReplyUserName,
	LastReplyFirstName,
	LastReplyLastName,
	LastReplyDisplayName,
	LastReplyDate,
	TopicRating,
	UserLastReplyRead,
	UserLastTopicRead
	FROM (

SELECT 
	f.ForumId,
	IsNull(f.LastReplyId,0) as LastReplyId,
	t.TopicId,
	t.ViewCount,
	t.ReplyCount,
	t.IsLocked,
	t.IsPinned,
	IsNull(t.TopicIcon,'') as TopicIcon,
	t.StatusId,
	t.IsAnnounce,
	t.AnnounceStart,
	t.AnnounceEnd,
	t.TopicType,
	c.Subject,
	IsNull(c.Summary,'') as Summary,
	IsNull(c.AuthorId,-1) as AuthorId,
	IsNull(c.AuthorName,'') as AuthorName,
	c.Body,
	c.DateCreated,
	IsNull(u.Username,'') as AuthorUserName,
	IsNull(u.FirstName,'') as AuthorFirstName,
	IsNull(u.LastName,'') as AuthorLastName,
	IsNull(u.DisplayName,'') as AuthorDisplayName,
	CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
	CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
	CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
	CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
	CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
	CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
	CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
	CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
	CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
	CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
	CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
	(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								CASE
									WHEN @SortColumn = 'ReplyCreated' THEN 
										CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END
									WHEN @SortColumn = 'TopicCreated' THEN
										c.DateCreated
								END DESC) as RowRank
				
		FROM	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Topics as t on f.TopicId = t.TopicId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on f.LastReplyId = r.ReplyId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
	
		WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0)	
		) AS TopicsWithRowNumbers
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	IF @RowIndex = 0
	BEGIN
		SELECT 
f.ForumId,
	IsNull(f.LastReplyId,0) as LastReplyId,
	t.TopicId,
	t.ViewCount,
	t.ReplyCount,
	t.IsLocked,
	t.IsPinned,
	IsNull(t.TopicIcon,'') as TopicIcon,
	t.StatusId,
	t.IsAnnounce,
	t.AnnounceStart,
	t.AnnounceEnd,
	t.TopicType,
	c.Subject,
	IsNull(c.Summary,'') as Summary,
	IsNull(c.AuthorId,-1) as AuthorId,
	IsNull(c.AuthorName,'') as AuthorName,
	c.Body,
	c.DateCreated,
	IsNull(u.Username,'') as AuthorUserName,
	IsNull(u.FirstName,'') as AuthorFirstName,
	IsNull(u.LastName,'') as AuthorLastName,
	IsNull(u.DisplayName,'') as AuthorDisplayName,
	CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
	CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
	CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
	CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
	CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
	CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
	CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
	CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
	CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
	CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
	CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
	(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								CASE
									WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END DESC
											) as RowRank
				
		FROM	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Topics as t on f.TopicId = t.TopicId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on f.LastReplyId = r.ReplyId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
	
		WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0 AND T.IsAnnounce = 1 AND T.AnnounceStart <= GETDate() AND T.AnnounceEnd >= GetDate())
		ORDER BY T.IsPinned DESC, c.DateCreated DESC, rc.DateCreated DESC
	END
BEGIN
If @UserId > 0
	BEGIN
	exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId
	exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @ModuleId, @UserId
	END
END


GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forum_Save]
@PortalId int,
@ForumId int,
@ModuleId int,
@ForumGroupId int,
@ParentForumId int,
@ForumName nvarchar(255),
@ForumDesc nvarchar(2000),
@SortOrder int,
@Active bit,
@Hidden bit,
@ForumSettingsKey varchar(255) = '',
@PermissionsId int
AS

IF EXISTS (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId AND ModuleId = @ModuleId)
	BEGIN
	DECLARE @curGroupId int 
	DECLARE @curParentForumId int
	BEGIN
	IF @ForumSettingsKey = ''
		SET @ForumSettingsKey = (SELECT ForumSettingsKey FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
	END
		SET @curGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
		SET @curParentForumId = (SELECT ParentForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
		
	IF @curGroupId <> @ForumGroupId OR @curParentForumId <> @ParentForumId
		BEGIN
		DECLARE @MaxSort int
		SET @MaxSort = (SELECT MAX(SortOrder) from {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ParentForumId = @ParentForumId AND ForumGroupId = @ForumGroupId)
		IF @MaxSort IS NULL
			SET @MaxSort = 0
		ELSE
			SET @MaxSort = @MaxSort + 1
		
		UPDATE {databaseOwner}{objectQualifier}activeforums_forums SET SortOrder = @MaxSort, ForumGroupId = @ForumGroupId WHERE ForumId = @ForumId --and ForumGroupID = @ForumGroupID
		exec {databaseOwner}{objectQualifier}activeforums_Forums_RepairSort @curGroupId, @curParentForumId
		exec {databaseOwner}{objectQualifier}activeforums_Forums_RepairSort @ForumGroupID, @ParentForumId
		END
	UPDATE {databaseOwner}{objectQualifier}activeforums_Forums
	SET PortalId = @PortalId, ForumGroupId = @ForumGroupId, ParentForumId = @ParentForumId, ForumName = @ForumName,
	ForumDesc = @ForumDesc,  Active = @Active, Hidden = @Hidden, DateUpdated = GetDate(), ForumSettingsKey = @ForumSettingsKey, ForumSecurityKey = @ForumSettingsKey,
	PermissionsId = @PermissionsId
	WHERE ForumId = @ForumId AND ModuleId = @ModuleId
	END
	
ELSE
	BEGIN
	SELECT @SortOrder = (Max(SortOrder) + 1) From {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleID=@ModuleID and ForumGroupID = @ForumGroupID 
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_Forums
		(PortalId, ModuleId, ForumGroupId, ParentForumId, ForumName, ForumDesc, SortOrder, Active, Hidden, PermissionsId)
		VALUES
		(@PortalId, @ModuleId, @ForumGroupId, @ParentForumId, @ForumName, @ForumDesc, IsNull(@SortOrder,0), @Active, @Hidden, @PermissionsId)
	SET @ForumId = SCOPE_IDENTITY()
		BEGIN
			IF @ForumSettingsKey = ''
				UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET ForumSettingsKey = 'F:' + CAST(@ForumId as varchar(50)), ForumSecurityKey = 'F:' + CAST(@ForumId as varchar(50)) WHERE ForumId = @ForumId
			ELSE
				UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET ForumSettingsKey = @ForumSettingsKey, ForumSecurityKey = @ForumSettingsKey WHERE ForumId = @ForumId
		END
	END
SELECT @ForumId


GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_NotRead]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@ForumIds nvarchar(1000)
AS
DECLARE @RecordCount int
SET @RecordCount = (Select Count(*) from {databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T INNER JOIN 
					{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as fids on fids.id = T.ForumId INNER JOIN
					{databaseOwner}{objectQualifier}activeforums_Forums as F on f.ForumId = fids.id LEFT OUTER JOIN 
					{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT on ft.forumid = t.Forumid AND ft.UserId = @UserId 
WHERE T.ModuleId = @ModuleId AND
	(
(
		T.TopicId NOT IN (SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Topics_Tracking WHERE UserId = @UserId)
		AND
		T.TopicId > IsNull(FT.MaxTopicRead,0)
		)
		OR
		(
		T.LastReplyId > (SELECT IsNull(MAX(LastReplyId),0) FROM {databaseOwner}{objectQualifier}activeforums_Topics_Tracking WHERE UserId = @UserId AND TopicId = T.TopicId)
		AND
		T.LastReplyId >  IsNull(FT.MaxReplyRead,0)
		)
))

SELECT ForumId, ForumName, LastReplyId, TopicId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsAnnounce, AnnounceStart, AnnounceEnd,
		TopicType, [Subject], Summary, AuthorId, AuthorName, Body, DateCreated, LastReplySubject, LastReplySummary, LastReplyAuthorId,
		LastReplyAuthorName, LastReplyUserName, LastReplyFirstName, LastReplyLastName, LastReplyDisplayName, LastReplyDate, AuthorUserName,
		AuthorFirstName, AuthorLastName, AuthorDisplayName, TopicRating, LastReplyRead, IsRead = 0, @RecordCount as RecordCount
	FROM
	(SELECT     T.ForumId, T.ForumName, T.LastReplyId, T.TopicId, T.ViewCount, T.ReplyCount, T.IsLocked, T.IsPinned, IsNull(T.TopicIcon,'') as TopicIcon, T.StatusId, T.IsAnnounce, T.AnnounceStart, T.AnnounceEnd, 
                      T.TopicType, T.Subject, T.Summary, T.AuthorId, T.AuthorName, T.Body, T.DateCreated, T.LastReplySubject, T.LastReplySummary, T.LastReplyAuthorId, 
                      T.LastReplyAuthorName, T.LastReplyUsername, T.LastReplyFirstName, T.LastReplyLastName, T.LastReplyDisplayName, T.LastReplyDate, T.AuthorUsername, 
                      T.AuthorFirstName, T.AuthorLastName, T.AuthorDisplayName,
                          (SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
                            IsNull(TT.LastReplyId,0) as LastReplyRead,
						ROW_NUMBER() OVER (
							ORDER BY 
								CASE
									WHEN @Sort = 'DESC' THEN T.LastReplyDate END DESC,
								CASE 
									WHEN @Sort = 'ASC' THEN T.LastReplyDate END ASC
								
							) as RowRank
		FROM	{databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T INNER JOIN 
		{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as fids on fids.id = T.ForumId INNER JOIN
					{databaseOwner}{objectQualifier}activeforums_Forums as F on f.ForumId = fids.id  LEFT OUTER JOIN 
			{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT on ft.forumid = t.Forumid AND ft.UserId = @UserId  LEFT OUTER JOIN 
			{databaseOwner}{objectQualifier}activeforums_Topics_Tracking as TT on t.TopicId = tt.TopicId AND tt.UserId = @UserId 
		WHERE 
			T.PortalId = @PortalId AND T.ModuleId = @ModuleId 
		 AND
			(
				(
				T.TopicId NOT IN (SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_Topics_Tracking WHERE UserId = @UserId)
				AND
				T.TopicId > IsNull(FT.MaxTopicRead,0)
				)
				OR
				(
				T.LastReplyId > (SELECT IsNull(MAX(LastReplyId),0) FROM {databaseOwner}{objectQualifier}activeforums_Topics_Tracking WHERE UserId = @UserId AND TopicId = T.TopicId)
				AND
				T.LastReplyId >  IsNull(FT.MaxReplyRead,0)
				)
			)
	) AS TopicsWithRowNumbers
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)


GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_UnansweredView]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@ForumIds nvarchar(1000)
AS
DECLARE @RecordCount int
SET @RecordCount = (Select Count(*) from {databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as fids ON fids.id = T.ForumId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums as F on fids.id = F.ForumId 
		
WHERE T.LastReplyId = 0 AND T.PortalId = @PortalId AND T.ModuleId = @ModuleId)

SELECT ForumId, ForumName, LastReplyId, TopicId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsAnnounce, AnnounceStart, AnnounceEnd,
		TopicType, [Subject], Summary, AuthorId, AuthorName, Body, DateCreated, LastReplySubject, LastReplySummary, LastReplyAuthorId,
		LastReplyAuthorName, LastReplyUserName, LastReplyFirstName, LastReplyLastName, LastReplyDisplayName, LastReplyDate, AuthorUserName,
		AuthorFirstName, AuthorLastName, AuthorDisplayName, "LastReplyRead" = 0, IsRead, TopicRating, @RecordCount as RecordCount
	FROM
	(SELECT     T.ForumId, T.ForumName, T.LastReplyId, T.TopicId, T.ViewCount, T.ReplyCount, T.IsLocked, T.IsPinned, IsNull(T.TopicIcon,'') as TopicIcon, T.StatusId, T.IsAnnounce, T.AnnounceStart, T.AnnounceEnd, 
                      T.TopicType, T.Subject, T.Summary, T.AuthorId, T.AuthorName, T.Body, T.DateCreated, T.LastReplySubject, T.LastReplySummary, T.LastReplyAuthorId, 
                      T.LastReplyAuthorName, T.LastReplyUsername, T.LastReplyFirstName, T.LastReplyLastName, T.LastReplyDisplayName, T.LastReplyDate, T.AuthorUsername, 
                      T.AuthorFirstName, T.AuthorLastName, T.AuthorDisplayName,
                      (CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END) as IsRead,
                          (SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (
							ORDER BY 
								CASE
									WHEN @Sort = 'DESC' THEN T.LastReplyDate END DESC,
								CASE 
									WHEN @Sort = 'ASC' THEN T.LastReplyDate END ASC
								
							) as RowRank
		FROM	{databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as fids ON fids.id = T.ForumId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums as F on fids.id = F.ForumId  LEFT OUTER JOIN
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
		WHERE T.PortalId = @PortalId AND T.ModuleId = @ModuleId AND T.LastReplyId = 0 
	) AS TopicsWithRowNumbers
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	


GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Groups_Save]
@ModuleId int,
@ForumGroupId int,
@GroupName nvarchar(150),
@SortOrder int,
@Active bit,
@Hidden bit,
@PermissionsId int
AS
IF EXISTS(Select ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Groups WHERE ForumGroupId = @ForumGroupId AND ModuleId = @ModuleId)
	UPDATE {databaseOwner}{objectQualifier}activeforums_Groups
	SET GroupName=@GroupName, Active=@Active,Hidden=@Hidden, PermissionsId = @PermissionsId
	WHERE ForumGroupId = @ForumGroupId and ModuleId = @ModuleId
ELSE
	BEGIN
		BEGIN
			SELECT @SortOrder = Max(SortOrder) + 1 From {databaseOwner}{objectQualifier}activeforums_Groups WHERE ModuleID=@ModuleID
				If @SortOrder IS NULL 
					SET @SortOrder = 1
			END
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Groups
		(ModuleId, GroupName, SortOrder,GroupSettingsKey,GroupSecurityKey,Active,Hidden, PermissionsId)
		VALUES
		(@ModuleId, @GroupName, @SortOrder,'','',@Active,@Hidden, @PermissionsId)
		SET @ForumGroupId = SCOPE_IDENTITY()
		UPDATE {databaseOwner}{objectQualifier}activeforums_Groups SET GroupSettingsKey = 'G:' + CAST(@ForumGroupId as varchar(50)), GroupSecurityKey = 'G:' + CAST(@ForumGroupId as varchar(50)) WHERE ForumGroupId = @ForumGroupId
	END
SELECT @ForumGroupId


GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Permission_Create') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}activeforums_Permission_Create
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Permission_Create
@AdminRoleId nvarchar(255)
AS
SET @AdminRoleId = @AdminRoleId + ';||||'
INSERT INTO {databaseOwner}{objectQualifier}activeforums_Permissions
           ([CanView]
           ,[CanRead]
           ,[CanCreate]
           ,[CanReply]
           ,[CanEdit]
           ,[CanDelete]
           ,[CanLock]
           ,[CanPin]
           ,[CanAttach]
           ,[CanPoll]
           ,[CanBlock]
           ,[CanTrust]
           ,[CanSubscribe]
           ,[CanAnnounce]
           ,[CanModApprove]
           ,[CanModMove]
           ,[CanModSplit]
           ,[CanModDelete]
           ,[CanModUser]
           ,[CanModEdit]
           ,[CanModLock]
           ,[CanModPin])
     VALUES
           (@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,''
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId
           ,@AdminRoleId)
   SELECT SCOPE_IDENTITY()

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Forums_GetPermissions') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}activeforums_Forums_GetPermissions
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Forums_GetPermissions
@PortalId int,
@ModuleId int 
AS
BEGIN
	SELECT forumid,p.* from {databaseOwner}{objectQualifier}activeforums_Forums as f INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as p ON p.PermissionsId = f.PermissionsId
	WHERE f.ModuleId = @ModuleId
END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
	@PortalId int,
	@ModuleId int,
	@UserId int
AS
BEGIN
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_Create @PortalId, @ModuleId, @UserId
	SET NOCOUNT ON
	SELECT		P.ProfileId, P.UserId, P.ModuleId, P.PortalId, P.TopicCount, P.ReplyCount, P.ViewCount, 
				P.AnswerCount, P.RewardPoints, P.UserCaption, P.DateCreated, 
                P.DateUpdated, P.DateLastActivity, P.Signature, P.SignatureDisabled, 
				P.TrustLevel, P.AdminWatch, P.AttachDisabled, P.Avatar, P.AvatarType, P.AvatarDisabled, 
				P.PrefDefaultSort, P.PrefDefaultShowReplies, P.PrefJumpLastPost, P.PrefTopicSubscribe,
				P.PrefSubscriptionType, P.PrefUseAjax, P.PrefEmailFormat, P.PrefBlockAvatars, 
				P.PrefBlockSignatures, P.PrefPageSize, P.Yahoo, P.MSN, P.ICQ, P.AOL, 
				P.Occupation, P.Location, P.Interests, P.WebSite, P.Badges, 
				IsNull(U.Username,'') as UserName, IsNull(U.FirstName,'') as FirstName, 
				IsNull(U.LastName,'') as LastName, IsNull(U.Email,'') as Email, IsNull(U.DisplayName,'') as DisplayName,
				IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GetDate()) <=1 THEN 1 ELSE 0 END),
				IsNull(P.DateLastPost,'') as DateLastPost
	FROM        {databaseOwner}{objectQualifier}activeforums_UserProfiles AS P WITH (NOLOCK) LEFT OUTER JOIN
                {databaseOwner}{objectQualifier}Users AS U WITH (NOLOCK) ON P.UserId = U.UserID
	WHERE P.UserId = @UserId AND P.PortalId = @PortalId
END

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Functions_SplitText') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}{objectQualifier}activeforums_Functions_SplitText
GO
CREATE FUNCTION {databaseOwner}{objectQualifier}activeforums_Functions_SplitText(@text varchar(8000), @delimiter char(1))
RETURNS @words TABLE (objectid smallint primary key, string varchar(1000), optionalid int)
AS
BEGIN
	DECLARE @pos smallint,
		@i smallint,
		@j smallint,
		@s varchar(255),
        @o int

	SET @pos = 1

	WHILE @pos <= LEN(@text)
	BEGIN
		SET @i = CHARINDEX(' ', @text, @pos)
		SET @j = CHARINDEX(@delimiter, @text, @pos)

		IF @i > 0 OR @j > 0
		BEGIN
			IF @i = 0 OR (@j > 0 AND @j < @i)
				SET @i = @j

			IF @i > @pos
			BEGIN
				-- @i now holds the earliest delimiter in the string
				SET @s = SUBSTRING(@text, @pos, @i - @pos)
				SET @o = 0
	            IF CHARINDEX('|',@s,0) > 0
					BEGIN
						SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
						SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))
						
					END
				INSERT INTO @words
				VALUES (@pos, @s, @o)
			END

			SET @pos = @i + 1
			WHILE @pos < LEN(@text) AND SUBSTRING(@text, @pos, 1) IN (' ', ',')
				SET @pos = @pos + 1
		END
		ELSE
		BEGIN
SET @s = SUBSTRING(@text, @pos, LEN(@text) - @pos + 1)
IF CHARINDEX('|',@s,0) > 0
					BEGIN
						SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
						SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))
						
					END

				
			INSERT INTO @words
			VALUES (@pos, @s ,@o)

			SET @pos = LEN(@text) + 1
		END
	END
	
	RETURN
END

GO

ALTER TABLE {databaseOwner}{objectQualifier}activeforums_ForumTopics ADD
	LastPostDate datetime NULL,
	LastPostData nvarchar(MAX) NULL
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_SettingsTable]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}activeforums_SettingsTable]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}activeforums_SettingsTable](	
@SettingsKey nvarchar(255)
)
RETURNS TABLE 
AS
RETURN 
(
SELECT pvt.GroupKey, [ALLOWATTACH],[ALLOWEMOTICONS],[ALLOWHTML],[ALLOWPOSTICON],[ALLOWRSS],[ALLOWSCRIPT],[ALLOWTAGS],[ATTACHCOUNT],[ATTACHMAXHEIGHT],[ATTACHMAXSIZE],[ATTACHMAXWIDTH],[ATTACHSTORE],[ATTACHTYPEALLOWED],[ATTACHUNIQUEFILENAMES],[AUTOSUBSCRIBEENABLED],[AUTOSUBSCRIBENEWTOPICSONLY],[AUTOSUBSCRIBEROLES],[AUTOTRUSTLEVEL],[DEFAULTTRUSTLEVEL],[EDITORHEIGHT],[EDITORPERMITTEDUSERS],[EDITORSTYLE],[EDITORTOOLBAR],[EDITORTYPE],[EDITORWIDTH],[EMAILADDRESS],[INDEXCONTENT],[ISMODERATED],[MCADDRESS],[MCADMINNOTIFY],[MCAUTOCREATEUSERS],[MCAUTORESPONSE],[MCENABLED],[MCEOMTAG],[MCEOMTAGREQ],[MCMODTYPE],[MCPOPPASSWORD],[MCPOPSERVER],[MCPOPUSERNAME],[MCREJECTNOTIFY],[MCRESTRICTALIAS],[MCSTRIPHTML],[MCSUBNOTIFY],[MCURL],[MODAPPROVETEMPLATEID],[MODDELETETEMPLATEID],[MODMOVETEMPLATEID],[MODNOTIFYTEMPLATEID],[MODREJECTTEMPLATEID],[PROFILETEMPLATEID],[QUICKREPLYFORMID],[REPLYFORMID],[TOPICFORMID],[TOPICSTEMPLATEID],[TOPICTEMPLATEID],[USEFILTER] from 
	(
		SELECT GroupKey, SettingName, SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings 
	) s PIVOT (MAX(SettingValue) FOR SettingName IN ([ALLOWATTACH],[ALLOWEMOTICONS],[ALLOWHTML],[ALLOWPOSTICON],[ALLOWRSS],[ALLOWSCRIPT],[ALLOWTAGS],[ATTACHCOUNT],[ATTACHMAXHEIGHT],[ATTACHMAXSIZE],[ATTACHMAXWIDTH],[ATTACHSTORE],[ATTACHTYPEALLOWED],[ATTACHUNIQUEFILENAMES],[AUTOSUBSCRIBEENABLED],[AUTOSUBSCRIBENEWTOPICSONLY],[AUTOSUBSCRIBEROLES],[AUTOTRUSTLEVEL],[DEFAULTTRUSTLEVEL],[EDITORHEIGHT],[EDITORPERMITTEDUSERS],[EDITORSTYLE],[EDITORTOOLBAR],[EDITORTYPE],[EDITORWIDTH],[EMAILADDRESS],[INDEXCONTENT],[ISMODERATED],[MCADDRESS],[MCADMINNOTIFY],[MCAUTOCREATEUSERS],[MCAUTORESPONSE],[MCENABLED],[MCEOMTAG],[MCEOMTAGREQ],[MCMODTYPE],[MCPOPPASSWORD],[MCPOPSERVER],[MCPOPUSERNAME],[MCREJECTNOTIFY],[MCRESTRICTALIAS],[MCSTRIPHTML],[MCSUBNOTIFY],[MCURL],[MODAPPROVETEMPLATEID],[MODDELETETEMPLATEID],[MODMOVETEMPLATEID],[MODNOTIFYTEMPLATEID],[MODREJECTTEMPLATEID],[PROFILETEMPLATEID],[QUICKREPLYFORMID],[REPLYFORMID],[TOPICFORMID],[TOPICSTEMPLATEID],[TOPICTEMPLATEID],[USEFILTER])) as pvt
)

GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUserRoles]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUserRoles]
GO


CREATE FUNCTION {databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUserRoles](@UserID int, @PortalID int, @dt DateTime,@opt int = 0)
RETURNS nvarchar(255)
AS
BEGIN
DECLARE roles_curs CURSOR FOR
SELECT R.RoleId, R.RoleName from {databaseOwner}{objectQualifier}UserRoles AS UR INNER JOIN {databaseOwner}{objectQualifier}Users AS U on UR.UserId = U.UserId INNER JOIN {databaseOwner}{objectQualifier}Roles AS R on UR.RoleId = R.RoleId WHERE U.UserId = @UserID and R.PortalId = @PortalID AND (ExpiryDate >= @dt or ExpiryDate is NULL)

DECLARE @RoleId int
DECLARE @Roles nvarchar(255)
DECLARE @RolesOut nvarchar(255)
SET @RolesOut = ''
OPEN roles_curs

fetch next from roles_curs into @RoleId, @roles

WHILE (@@fetch_status = 0)
BEGIN
	IF @opt = 0
	Set @RolesOut = @RolesOut +  @roles + ';'
	ELSE
	SET @RolesOut = @RolesOut + CONVERT(nvarchar(255),@RoleId) + ';'
	
	fetch next from roles_curs into @RoleId, @roles
END


close roles_curs
deallocate roles_curs

RETURN @RolesOut
END

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicView]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicView]
@PortalId int,
@ModuleId int,
@ForumId int,
@TopicId int,
@UserId int,
@RowIndex int, 
@MaxRows int,
@IsSuperUser bit = 0,
@Sort varchar(10) = 'ASC'
AS
--Forum/Group/Topic Info
DECLARE @LastPostId int
DECLARE @ReplyCount int
SET @ReplyCount = (Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
BEGIN
SELECT     
	v.ForumGroupId, 
	v.ModuleId, 
	v.GroupName, 
	v.GroupActive, 
	v.GroupHidden, 
	v.ForumId, 
	v.ParentForumId, 
	v.ForumName, 
	v.ForumDesc, 
	v.ForumActive, 
	v.ForumHidden, 
    v.TotalTopics, 
	ISNULL(v.TotalReplies, 0) AS TotalReplies,
	v.LastPostId,
	v.GroupSettingsKey,
	v.ForumSettingsKey,
	TopicTemplateId = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'TOPICTEMPLATEID' and GroupKey = v.ForumSettingsKey),0),
    
                          IsNull((SELECT     SettingValue
                            FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS activeforums_Settings_1
                            WHERE      (SettingName = 'ALLOWRSS') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowRSS,
                          IsNull((SELECT     SettingValue
                            FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS activeforums_Settings_3
                            WHERE      (SettingName = 'ALLOWHTML') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowHTML,
                          IsNull((SELECT     SettingValue
                            FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS activeforums_Settings_2
                            WHERE      (SettingName = 'ALLOWSCRIPT') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowScript,
                            IsNull((SELECT     SettingValue
                            FROM          {databaseOwner}{objectQualifier}activeforums_Settings
                            WHERE      (SettingName = 'ALLOWTAGS') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowTags,
                             FT.TopicId,
                          (SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM          {databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = @TopicId)) AS TopicRating,
ISNULL
                          ((SELECT     Id
                              FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
                              WHERE     (ForumId = @ForumId) AND (TopicId = @TopicId) AND (UserId = @UserId)), 0) AS IsSubscribedTopic, ISNULL
                          ((SELECT     Id
                              FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions AS activeforums_Subscriptions_1
                              WHERE     (ForumId = @ForumId) AND (TopicId = 0) AND (UserId = @UserId)), 0) AS IsSubscribedForum,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.DateCreated,'') ELSE IsNull(R.DateCreated,'') END AS LastPostDate, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.AuthorId,'') ELSE IsNull(R.AuthorId,'') END AS LastPostAuthorId, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.AuthorName,'') ELSE IsNull(R.AuthorName,'') END AS LastPostAuthorName,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.UserName,'') ELSE IsNull(R.Username,'') END AS LastPostUserName,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.FirstName,'') ELSE IsNull(R.FirstName,'') END AS LastPostFirstName, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.LastName,'') ELSE IsNull(R.LastName,'') END AS LastPostLastName, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.DisplayName,'') ELSE IsNull(R.DisplayName,'') END AS LastPostDisplayName, T.Subject, T.Summary, T.AuthorId, T.AuthorName, T.Username, T.FirstName, T.LastName, 
                      T.DisplayName, T.DateCreated, T.DateUpdated, T.ViewCount, @ReplyCount as ReplyCount, T.IsPinned, T.IsLocked, T.StatusId, T.TopicIcon, T.TopicType, 
                      {databaseOwner}{objectQualifier}activeforums_Poll.PollID,
					{databaseOwner}{objectQualifier}activeforums_Topic_GetPrevNext(@ForumId, @TopicId, 1) AS NextTopic, 
                    {databaseOwner}{objectQualifier}activeforums_Topic_GetPrevNext(@ForumId, @TopicId, -1) AS PrevTopic
FROM         {databaseOwner}{objectQualifier}activeforums_ForumTopics AS FT INNER JOIN
                      {databaseOwner}{objectQualifier}vw_activeforums_GroupForum AS v ON FT.ForumId = v.ForumId INNER JOIN
                      {databaseOwner}{objectQualifier}vw_activeforums_ForumTopics AS T ON FT.TopicId = T.TopicId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies AS R ON FT.LastReplyId = R.ReplyId AND FT.LastReplyId IS NOT NULL LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Poll ON T.TopicId = {databaseOwner}{objectQualifier}activeforums_Poll.TopicId
WHERE     (v.ForumActive = 1) AND (v.ModuleId = @ModuleId) AND (v.ForumId = @ForumId) AND (FT.TopicId = @TopicId)
END
--Forum Security
BEGIN
	Select p.* from {databaseOwner}{objectQualifier}activeforums_Permissions as p INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.PermissionsId = p.PermissionsId WHERE f.ForumId = @ForumId
	
END
--Get Topic and Replies
	SELECT	ForumId, TopicId, ReplyId, [Subject], Summary, AuthorId, StatusId, AuthorName, UserName, FirstName, LastName,
			DisplayName, DateCreated, DateUpdated, Body, TopicCount, ReplyCount, ViewCount, AnswerCount,
			RewardPoints, UserDateCreated, DateLastActivity, UserCaption, [Signature], SignatureDisabled,
			UserPostCount, UserTotalPoints,IPAddress,Avatar,AvatarType,AvatarDisabled,Yahoo,MSN,ICQ,AOL,Occupation,Location,Interests,WebSite,MemberSince,
			ContentId,IsUserOnline,	UserRoles = {databaseOwner}{objectQualifier}activeforums_UserProfiles_GetUserRoles(AuthorId, @PortalID, GetDate(),0),
			Tags = RTRIM(IsNull({databaseOwner}{objectQualifier}activeforums_Topics_GetTags(TopicId),''))
			
	FROM
			(
			SELECT	T.ForumId, T.TopicId, T.ReplyId, T.Subject, T.Summary, T.AuthorId, T.StatusId, IsNull(T.AuthorName,'anon') as AuthorName, IsNull(T.Username,IsNull(T.AuthorName,'anon')) as Username,
			IsNull(T.FirstName,'') as FirstName, IsNull(T.LastName,'') as LastName,IsNull(T.DisplayName,T.AuthorName) as DisplayName,
			T.DateCreated, T.DateUpdated, C.Body, IsNull(P.TopicCount,0) as TopicCount, IsNull(P.ReplyCount,0) as ReplyCount,
			IsNull(P.ViewCount,0) as ViewCount, IsNull(P.AnswerCount,0) as AnswerCount, IsNull(P.RewardPoints,0) as RewardPoints,
			IsNull(P.DateCreated,'') AS UserDateCreated, IsNull(P.DateLastActivity,'') as DateLastActivity, 
			IsNull(P.UserCaption,'') as UserCaption, IsNull(P.Signature,'') as [Signature], IsNull(P.SignatureDisabled,0) as SignatureDisabled, 
			UserPostCount = (IsNull(P.TopicCount,0) + IsNull(P.ReplyCount,0)), 
			UserTotalPoints = (IsNull(P.TopicCount,0) + IsNull(P.ReplyCount,0) + IsNull(P.AnswerCount,0) + IsNull(P.RewardPoints,0)),
			C.IPAddress, IsNull(P.Avatar,'') as Avatar, IsNull(P.AvatarType,0) as AvatarType, IsNull(P.AvatarDisabled,0) as AvatarDisabled,
			IsNull(P.Yahoo,'') as Yahoo, IsNull(P.MSN,'') as MSN, IsNull(P.ICQ,'') as ICQ, IsNull(P.AOL,'') as AOL, IsNull(P.Occupation,'') as Occupation, 
			IsNull(P.Location,'') as Location, IsNull(P.Interests,'') as Interests, IsNull(P.WebSite,'') as WebSite, IsNull(P.DateCreated,'') as MemberSince,
			C.ContentId, IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GetDate()) <=1 THEN 1 ELSE 0 END),
			ROW_NUMBER() OVER (Order By 
								CASE
									WHEN @Sort = 'DESC' THEN T.DateCreated END DESC,
								CASE 
									WHEN @Sort = 'ASC' THEN T.DateCreated END ASC
								) as RowRank
			FROM	{databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
                    {databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId LEFT OUTER JOIN
                    {databaseOwner}{objectQualifier}activeforums_UserProfiles AS P ON C.AuthorId = P.UserId AND P.PortalId = @PortalId AND p.ModuleId = @ModuleId
			WHERE     (T.TopicId = @TopicId)
			)
		AS TopicWithRowNumbers
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)

--Get Attachments
SELECT     A.AttachID, c.ContentId, A.PostID, A.UserID, A.Filename, A.DateAdded, A.DateUpdated, A.FileData, A.ContentType, A.FileSize, A.AllowDownload
FROM         {databaseOwner}{objectQualifier}activeforums_Attachments AS A INNER JOIN
			{databaseOwner}{objectQualifier}activeforums_Content_Attachments as c on a.attachid = c.attachid inner join
                      {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T ON c.ContentId = T.ContentId
WHERE     (T.TopicId = @TopicId AND A.AllowDownload = 1)
--Update View Count
UPDATE {databaseOwner}{objectQualifier}activeforums_Topics SET ViewCount = (ViewCount+1) WHERE TopicId = @TopicId
If @UserId > 0
BEGIN
SELECT @LastPostId = IsNull(LastReplyId,0) FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE ForumId = @ForumId AND TopicId = @TopicId
exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId	
SET @LastPostId = IsNull(@LastPostId,0)
exec {databaseOwner}{objectQualifier}activeforums_Topics_Tracking_UpdateUser @ForumId, @TopicId, @LastPostId, @UserId
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @ModuleId, @UserId
END


GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicDisplay]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicDisplay]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicDisplay]
@PortalId int,
@ModuleId int,
@ForumId int,
@TopicId int,
@UserId int,
@RowIndex int, 
@MaxRows int,
@IsSuperUser bit = 0,
@Sort varchar(10) = 'ASC'
AS
--Forum/Group/Topic Info
DECLARE @LastPostId int
DECLARE @ReplyCount int

SET @ForumId = (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @TopicId)

SET @ReplyCount = (Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)

	BEGIN
		SELECT     @ForumId as ForumId, t.TopicId, t.ViewCount, @ReplyCount as ReplyCount, t.IsLocked, t.IsPinned, t.TopicIcon, t.StatusId, t.TopicType, c.Subject, c.Summary, c.Body, c.DateCreated, c.DateUpdated, 
                      c.AuthorId, c.AuthorName, u.Username, u.FirstName, u.LastName, u.DisplayName, {databaseOwner}{objectQualifier}activeforums_UserProfiles_GetUserRoles(c.AuthorId, @PortalID, GETDATE(), 1) 
                      AS UserRoles, RTRIM(ISNULL({databaseOwner}{objectQualifier}activeforums_Topics_GetTags(t.TopicId), '')) AS Tags, c.IPAddress, up.TopicCount as UserTopicCount, up.ReplyCount AS UserReplyCount,
                       up.AnswerCount, up.RewardPoints, up.UserCaption, up.DateLastActivity, up.DateLastPost, up.DateCreated as UserDateCreated, up.DateUpdated as UserDateUpdated,
					"Signature" = (CASE WHEN up.SignatureDisabled = 1 THEN '' ELSE up.Signature END), up.TrustLevel, 
					"Avatar" = (CASE WHEN up.AvatarDisabled = 1 THEN '' ELSE up.Avatar END), 
					"IsUserOnLine" = (CASE WHEN DATEDIFF(mi,up.DateLastActivity,GetDate()) <=1 THEN 'True' ELSE 'False' END),
					"TopicRating" = IsNULL((SELECT AVG(Rating) from {databaseOwner}{objectQualifier}activeforums_Topics_Ratings WHERE TopicId = @TopicId),0),
                      up.AvatarType, up.Yahoo, up.MSN, up.ICQ, up.AOL, up.Occupation, up.Location, up.Interests, up.WebSite,
					  ft.LastPostDate, ft.LastPostData,
					{databaseOwner}{objectQualifier}activeforums_Topic_GetPrevNext(@ForumId, @TopicId, 1) AS PrevTopic, 
                    {databaseOwner}{objectQualifier}activeforums_Topic_GetPrevNext(@ForumId, @TopicId, -1) AS NextTopic
					 
		FROM         {databaseOwner}{objectQualifier}activeforums_Topics AS t INNER JOIN
					{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on ft.TopicId = t.TopicId INNER JOIN
             {databaseOwner}{objectQualifier}activeforums_Content AS c ON t.ContentId = c.ContentId LEFT OUTER JOIN
             {databaseOwner}{objectQualifier}activeforums_UserProfiles AS up ON c.AuthorId = up.UserId and up.ModuleId = @ModuleId LEFT OUTER JOIN
             {databaseOwner}{objectQualifier}Users AS u ON c.AuthorId = u.UserID
		WHERE     (t.TopicId = @TopicId) AND (t.IsApproved = 1) AND (t.IsDeleted = 0)
	END
	BEGIN
		if @RowIndex = 0
			SET @MaxRows = @MaxRows - 1

		SELECT	@ForumId as ForumId, ReplyId,ReplyToId,StatusId,[Subject], Summary,Body,DateCreated,DateUpdated,AuthorId, AuthorName,IPAddress, UserName, FirstName, LastName,
				DisplayName, UserTopicCount, UserReplyCount, AnswerCount, RewardPoints, UserCaption, UserDateCreated, UserDateUpdated, DateLastActivity, DateLastPost,
				[Signature],TrustLevel,Avatar,IsUserOnline, AvatarType, Yahoo, MSN,ICQ,AOL,Occupation,Location,Interests,WebSite,
				UserRoles = {databaseOwner}{objectQualifier}activeforums_UserProfiles_GetUserRoles(AuthorId, @PortalID, GetDate(),1)
			
		FROM
			(
				SELECT     r.ReplyId, r.ReplyToId, r.StatusId, c.Subject, c.Summary, c.Body, c.DateCreated, c.DateUpdated, c.AuthorId, c.AuthorName, c.IPAddress, u.Username, u.FirstName, 
                      u.LastName, u.DisplayName, up.TopicCount as UserTopicCount, up.ReplyCount as UserReplyCount, up.AnswerCount, up.RewardPoints, up.UserCaption, up.DateCreated AS UserDateCreated, 
                      up.DateUpdated AS UserDateUpdated, up.DateLastActivity, up.DateLastPost, 
					"Signature" = (CASE WHEN up.SignatureDisabled = 1 THEN '' ELSE up.Signature END), up.TrustLevel, 
					"Avatar" = (CASE WHEN up.AvatarDisabled = 1 THEN '' ELSE up.Avatar END), 
					"IsUserOnLine" = (CASE WHEN DATEDIFF(mi,up.DateLastActivity,GetDate()) <=1 THEN 'True' ELSE 'False' END),
                      up.AvatarType, up.Yahoo, up.MSN, up.ICQ, up.AOL, up.Occupation, up.Location, up.Interests, up.WebSite,
					ROW_NUMBER() OVER (Order By 
								CASE
									WHEN @Sort = 'DESC' THEN c.DateCreated END DESC,
								CASE 
									WHEN @Sort = 'ASC' THEN c.DateCreated END ASC
								) as RowRank
				FROM  {databaseOwner}{objectQualifier}activeforums_Replies AS r INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS c ON r.ContentId = c.ContentId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_UserProfiles AS up ON c.AuthorId = up.UserId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Users AS u ON c.AuthorId = u.UserID
				WHERE (r.TopicId = @TopicId AND r.IsApproved = 1 AND r.IsDeleted = 0)



			)
		AS TopicWithRowNumbers
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	END
--Get Attachments
SELECT     A.AttachID, c.ContentId, A.PostID, A.UserID, A.Filename, A.DateAdded, A.DateUpdated, A.FileData, A.ContentType, A.FileSize, A.AllowDownload
FROM         {databaseOwner}{objectQualifier}activeforums_Attachments AS A INNER JOIN
			{databaseOwner}{objectQualifier}activeforums_Content_Attachments as c on a.attachid = c.attachid inner join
                      {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T ON c.ContentId = T.ContentId
WHERE     (T.TopicId = @TopicId AND A.AllowDownload = 1)
--Update View Count
UPDATE {databaseOwner}{objectQualifier}activeforums_Topics SET ViewCount = (ViewCount+1) WHERE TopicId = @TopicId
If @UserId > 0
BEGIN
SELECT @LastPostId = IsNull(LastReplyId,0) FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE ForumId = @ForumId AND TopicId = @TopicId
exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId	
SET @LastPostId = IsNull(@LastPostId,0)
exec {databaseOwner}{objectQualifier}activeforums_Topics_Tracking_UpdateUser @ForumId, @TopicId, @LastPostId, @UserId
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @ModuleId, @UserId
END

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TagCloud]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TagCloud]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TagCloud]
@PortalId int,
@ModuleId int
AS
SELECT TagName,
	CASE 
		WHEN RowIndex < 5 THEN 3
		WHEN RowIndex >=5 AND RowIndex <10 THEN 2
		WHEN RowIndex >=10 THEN 1 END as Priority  FROM
	(
	SELECT Top 15  TagName,  ROW_NUMBER() OVER (ORDER BY Items DESC) as RowIndex
	FROM         {databaseOwner}{objectQualifier}activeforums_Tags WHERE TagName <> '' AND PortalId = @PortalId AND ModuleId = @ModuleId
	) as tag Order By NewID()

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopMembers]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopMembers]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopMembers]
@PortalId int,
@Rows int = 10
AS
SET ROWCOUNT @Rows
SELECT UserId, Points, UserName, DisplayName, FirstName, LastName FROM
	(
	SELECT p.UserId, (p.TopicCount + p.ReplyCount + p.RewardPoints) as Points, u.UserName, u.DisplayName, u.FirstName, u.LastName from {databaseOwner}{objectQualifier}activeforums_UserProfiles as p
	INNER JOIN {databaseOwner}{objectQualifier}userportals as up on p.UserId = up.UserId AND up.PortalId = @PortalId
	INNER JOIN {databaseOwner}{objectQualifier}users as u ON up.UserId = u.UserId
	WHERE DATEDIFF(dd,p.DateLastPost,GetDate()) < 60
	) as p
Order By Points DESC

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicsDisplay]
@PortalId int,
@ModuleId int,
@ForumId int,
@UserId int,
@RowIndex int = 0, 
@MaxRows int = 20,
@IsSuperUser bit = 0,
@SortColumn nvarchar(25) = 'ReplyCreated',
@ForumIds nvarchar(1000) = ''
AS
IF @ForumIds = '' AND @ForumId > 0
	BEGIN
SELECT ForumId, TopicId, LastPostData, LastReplyId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsAnnounce,
		AnnounceStart, AnnounceEnd, TopicType, Body, [Subject], Summary, AuthorId, AuthorName, Username, Firstname, LastName,
		DisplayName, DateCreated, LastPostDate, UserLastReplyRead, UserLastTopicRead, TopicRating, P.*
		FROM (
			SELECT     f.ForumId, t.TopicId, IsNull(f.LastPostData,'') as LastPostData, IsNull(f.LastReplyId,0) as LastReplyId, t.ViewCount, t.ReplyCount, 
			t.IsLocked, t.IsPinned, t.TopicIcon, t.StatusId, t.IsAnnounce, 
			t.AnnounceStart, t.AnnounceEnd, t.TopicType, c.Body, c.Subject, c.Summary, c.AuthorId, c.AuthorName, u.Username, u.FirstName, 
			u.LastName, u.DisplayName, c.DateCreated,ISNULL(f.LastPostDate,c.DateCreated) as LastPostDate,
			CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
			CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
				(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
			 ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								CASE
									WHEN @SortColumn = 'ReplyCreated' THEN 
										f.LastPostDate 
									WHEN @SortColumn = 'TopicCreated' THEN c.DateCreated END DESC) as RowRank
			FROM      {databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Topics AS t ON f.TopicId = t.TopicId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS c ON t.ContentId = c.ContentId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Users AS u ON c.AuthorId = u.UserID LEFT OUTER JOIN				
					  {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
			WHERE     (f.ForumId = @ForumId AND t.IsApproved = 1 AND t.IsDeleted = 0)	
			) as topics INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as P on P.PermissionsId = topics.ForumId
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
END
Else

	BEGIN
SELECT topics.ForumId, ff.ForumName,g.GroupName, TopicId, LastPostData, topics.LastReplyId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsAnnounce,
		AnnounceStart, AnnounceEnd, TopicType, Body, [Subject], Summary, AuthorId, AuthorName, Username, Firstname, LastName,
		DisplayName, topics.DateCreated, topics.LastPostDate, UserLastReplyRead, UserLastTopicRead, TopicRating, P.*
		FROM (
			SELECT     f.ForumId, t.TopicId, IsNull(f.LastPostData,'') as LastPostData, IsNull(f.LastReplyId,0) as LastReplyId, t.ViewCount, t.ReplyCount, 
			t.IsLocked, t.IsPinned, t.TopicIcon, t.StatusId, t.IsAnnounce, 
			t.AnnounceStart, t.AnnounceEnd, t.TopicType, c.Body, c.Subject, c.Summary, c.AuthorId, c.AuthorName, u.Username, u.FirstName, 
			u.LastName, u.DisplayName, c.DateCreated,ISNULL(f.LastPostDate,c.DateCreated) as LastPostDate,
			CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
			CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
				(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
			 ROW_NUMBER() OVER (ORDER BY T.IsPinned DESC,
								CASE
									WHEN @SortColumn = 'ReplyCreated' THEN 
										f.LastPostDate 
									WHEN @SortColumn = 'TopicCreated' THEN c.DateCreated END DESC) as RowRank
			FROM      {databaseOwner}{objectQualifier}activeforums_ForumTopics AS f INNER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,';') as fs ON fs.id = f.ForumId INNER JOIN
					  
                      {databaseOwner}{objectQualifier}activeforums_Topics AS t ON f.TopicId = t.TopicId INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content AS c ON t.ContentId = c.ContentId LEFT OUTER JOIN
                      {databaseOwner}{objectQualifier}Users AS u ON c.AuthorId = u.UserID LEFT OUTER JOIN				
					  {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
			WHERE     (t.IsApproved = 1 AND t.IsDeleted = 0)	
			) as topics INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as ff ON topics.ForumId = ff.ForumId INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as P on P.PermissionsId = topics.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on g.ForumGroupId = ff.ForumGroupId
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)
	END
BEGIN
If @UserId > 0
	BEGIN
If @ForumId > 0
	BEGIN
	exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId
	END
	exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @ModuleId, @UserId
	END
END

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumsList]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumsList]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumsList]
@PortalId int,
@ModuleId int
AS
SELECT F.*,P.*,s.*,G.GroupName,G.Active as GroupActive, G.Hidden as GroupHidden,GETDATE() as LastRead from {databaseOwner}{objectQualifier}activeforums_Forums as f INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_Groups as G ON F.ForumGroupId = G.ForumGroupId INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_Permissions as P ON P.PermissionsId = f.PermissionsId INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_SettingsTable('F') as s ON s.GroupKey = f.ForumSettingsKey
WHERE F.PortalId = @PortalId AND (F.ModuleId = @ModuleId OR @ModuleId=-1)
ORDER BY G.SortOrder, F.SortOrder


GO



IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_UpdateActivity]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_UpdateActivity]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_UpdateActivity]
@PortalId int,
@ModuleId int,
@UserId int

AS
If @UserId > 0 
	exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_Create @PortalId, @ModuleId, @UserId
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles SET DateLastActivity = GetDate() WHERE UserId = @UserId and PortalId = @PortalId AND ModuleId = @ModuleId

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Stats]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Stats]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Stats]
@PortalId int,
@ModuleId int,
@Interval int
AS
DECLARE @Guests int
SET @Guests = (SELECT Count(*) FROM {databaseOwner}{objectQualifier}AnonymousUsers WHERE PortalId = @PortalId and (DATEDIFF(mi, LastActiveDate, GETDATE()) < @Interval))

DECLARE @Members int
SET @Members = (SELECT Count(*) FROM {databaseOwner}{objectQualifier}activeforums_UserProfiles  WHERE PortalId = @PortalId AND ModuleId = @ModuleId AND DATEDIFF(mi, DateLastActivity, GETDATE()) < @Interval)
DECLARE @MembersTotal int
SET @MembersTotal = (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Users AS U INNER JOIN {databaseOwner}{objectQualifier}UserPortals AS P ON U.UserID = P.UserId WHERE PortalId = @PortalId AND Authorised = 1)

SELECT IsNull(@Guests,0) as Guests, IsNull(@Members,0) as Members, IsNull(@MembersTotal, 0) as MembersTotal

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUsersOnline]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUsersOnline]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_GetUsersOnline]
@PortalId int,
@ModuleId int,
@Interval int
AS
SELECT    DATEDIFF(mi, P.DateLastActivity, GETDATE()), U.UserID, U.Username, U.FirstName, U.LastName, U.Email, U.DisplayName, P.PortalId
FROM	{databaseOwner}{objectQualifier}activeforums_UserProfiles AS P INNER JOIN
        {databaseOwner}{objectQualifier}Users AS U ON P.UserId = U.UserID
WHERE     (P.PortalId = @PortalId AND P.ModuleId = @ModuleId) AND (DATEDIFF(mi, P.DateLastActivity, GETDATE()) < @Interval)

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Get]
	@PortalId int,
	@ModuleId int,
	@UserId int
AS
BEGIN
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_Create @PortalId, @ModuleId, @UserId
	SET NOCOUNT ON
	SELECT		P.ProfileId, P.UserId, P.ModuleId, P.PortalId, P.TopicCount, P.ReplyCount, P.ViewCount, 
				P.AnswerCount, P.RewardPoints, P.UserCaption, P.DateCreated, 
                P.DateUpdated, P.DateLastActivity, P.Signature, P.SignatureDisabled, 
				P.TrustLevel, P.AdminWatch, P.AttachDisabled, P.Avatar, P.AvatarType, P.AvatarDisabled, 
				P.PrefDefaultSort, P.PrefDefaultShowReplies, P.PrefJumpLastPost, P.PrefTopicSubscribe,
				P.PrefSubscriptionType, P.PrefUseAjax, P.PrefEmailFormat, P.PrefBlockAvatars, 
				P.PrefBlockSignatures, P.PrefPageSize, P.Yahoo, P.MSN, P.ICQ, P.AOL, 
				P.Occupation, P.Location, P.Interests, P.WebSite, P.Badges, 
				IsNull(U.Username,'') as UserName, IsNull(U.FirstName,'') as FirstName, 
				IsNull(U.LastName,'') as LastName, IsNull(U.Email,'') as Email, IsNull(U.DisplayName,'') as DisplayName,
				IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GetDate()) <=1 THEN 1 ELSE 0 END),
				IsNull(P.DateLastPost,'') as DateLastPost
	FROM        {databaseOwner}{objectQualifier}activeforums_UserProfiles AS P WITH (NOLOCK) LEFT OUTER JOIN
                {databaseOwner}{objectQualifier}Users AS U WITH (NOLOCK) ON P.UserId = U.UserID
	WHERE P.UserId = @UserId AND P.PortalId = @PortalId AND P.ModuleId = @ModuleId
END


GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UserProfiles_Create]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Create]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UserProfiles_Create]
@PortalId int,
@ModuleId int,
@UserId int
AS
IF NOT EXISTS(Select ProfileId FROM {databaseOwner}{objectQualifier}activeforums_UserProfiles WHERE UserId = @UserId AND PortalId = @PortalId AND ModuleId = @ModuleId)
	BEGIN
	DECLARE @MemberSince datetime
	SELECT @MemberSince = CreatedDate FROM {databaseOwner}{objectQualifier}UserPortals WHERE UserId = @UserId AND PortalId = @PortalId
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_UserProfiles
		(UserId, ModuleId, PortalId, DateCreated, DateLastActivity)
		VALUES
		(@UserId, @ModuleId, @PortalId, IsNull(@MemberSince,GetDate()), GetDate())
	DECLARE @TopicCount int 
	DECLARE @ReplyCount int
	SELECT @TopicCount = Count(*) FROM {databaseOwner}{objectQualifier}activeforums_Topics as T INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content as C ON T.ContentId = C.ContentId
	WHERE c.authorid = @UserId
	SELECT @ReplyCount = Count(*) FROM {databaseOwner}{objectQualifier}activeforums_Replies as R INNER JOIN
                      {databaseOwner}{objectQualifier}activeforums_Content as C ON R.ContentId = C.ContentId
	WHERE c.authorid = @UserId
	UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles
		SET TopicCount = @TopicCount, ReplyCount = @ReplyCount WHERE UserId = @UserId AND PortalId = @PortalId AND ModuleId = @ModuleId
	END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TP_GetPosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_TP_GetPosts]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_TP_GetPosts]
@PortalId int,
@Forums nvarchar(1000),
@TopicsOnly bit,
@RandomOrder bit,
@Rows int,
@UserId int,
@IgnoreSecurity bit = 0,
@IsSuperUser bit = 0,
@Tags nvarchar(400),
@FilterByUserId int = -1
AS
--SET ROWCOUNT @Rows
IF @RandomOrder = 1 AND @TopicsOnly = 1
	BEGIN
		SELECT * FROM (
		SELECT	g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, T.ForumName, T.ForumId, T.[Subject],
				T.AuthorId, T.AuthorUserName, T.AuthorFirstName, T.AuthorLastName, T.AuthorDisplayName, T.DateCreated,
				T.Body, T.ReplyCount, T.TopicId, "ReplyId" = 0,ROW_NUMBER() OVER (ORDER BY NewID()) as RowRank
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T 
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON T.ForumId = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
		WHERE @Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = t.ModuleId))
		) as posts WHERE RowRank <=@Rows
	END
IF @RandomOrder = 0 AND @TopicsOnly = 1
	BEGIN
		SELECT * FROM (
		SELECT	g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, T.ForumName, T.ForumId, T.[Subject],
				T.AuthorId, T.AuthorUserName, T.AuthorFirstName, T.AuthorLastName, T.AuthorDisplayName, T.DateCreated,
				T.Body, T.ReplyCount, T.TopicId, "ReplyId" = 0,ROW_NUMBER() OVER (ORDER BY T.DateCreated DESC) as RowRank
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T 
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON f.ID = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
		WHERE (@FilterByUserId = -1 OR T.AuthorId = @FilterByUserId)
		AND (@Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = t.ModuleId))
			)
		) as posts WHERE RowRank <=@Rows
	END
IF @RandomOrder = 0 AND @TopicsOnly = 0 
	BEGIN
		SELECT * FROM (
		SELECT g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, AF.ForumName, T.ForumId,
				T.Subject as [Subject], T.AuthorId as AuthorId,
				T.Username AS AuthorUserName, T.FirstName as AuthorFirstName,
				T.LastName AS AuthorLastName, T.DisplayName AS AuthorDisplayName,
				T.DateUpdated AS DateCreated,
				"ReplyCount" = 0, T.TopicId, T.ReplyId,
				c.Body,ROW_NUMBER() OVER (ORDER BY T.DateUpdated DESC) as RowRank
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicView as T
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON T.ForumId = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = T.ContentId
		WHERE (@Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = AF.ModuleId))
			)
		) as Posts WHERE RowRank <= @Rows
	END
IF @RandomOrder = 1 AND @TopicsOnly = 0 
	BEGIN
		SELECT * FROM (
		SELECT g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, AF.ForumName, T.ForumId,
				T.Subject as [Subject], T.AuthorId as AuthorId,
				T.Username AS AuthorUserName, T.FirstName as AuthorFirstName,
				T.LastName AS AuthorLastName, T.DisplayName AS AuthorDisplayName,
				T.DateUpdated AS DateCreated,
				"ReplyCount" = 0, T.TopicId, T.ReplyId,
				c.Body,ROW_NUMBER() OVER (ORDER BY NEWID() DESC) as RowRank
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicView as T
				INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON T.ForumId = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = T.ContentId
		WHERE (@Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = AF.ModuleId))
			)
		) as Posts WHERE RowRank <=@Rows
		
	END

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}activeforums_Topics_Get') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}activeforums_Topics_Get
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_Topics_Get
@PortalId int,
@ModuleId int,
@TopicId int,
@ForumId int,
@UserId int = -1,
@WithSecurity bit = 0
AS
SELECT     T.TopicId, T.ContentId, T.ViewCount, T.ReplyCount, T.IsLocked, T.IsPinned, IsNull(T.TopicIcon,'') as TopicIcon, T.StatusId, T.AnnounceStart, T.AnnounceEnd, C.Subject, C.Summary, C.Body, 
                      C.DateCreated, C.AuthorId, C.AuthorName, T.IsApproved, T.IsDeleted, T.IsAnnounce, T.IsArchived, T.TopicType, C.DateUpdated,T.IsApproved, IsNull(U.Username,'') as Username, 
                      IsNull(U.FirstName,'') as FirstName, IsNull(U.LastName,'') as LastName, IsNull(U.Email,'') as Email, IsNull(U.DisplayName,'') as DisplayName,
			Tags = IsNull({databaseOwner}{objectQualifier}activeforums_Topics_GetTags(@TopicId),'')
FROM        {databaseOwner}{objectQualifier}activeforums_Topics AS T INNER JOIN
            {databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId LEFT OUTER JOIN
            {databaseOwner}{objectQualifier}Users AS U ON C.AuthorId = U.UserID
WHERE     (T.IsDeleted = 0) AND (T.IsArchived = 0) AND (C.IsDeleted = 0) AND (T.TopicId = @TopicId)

GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_MyTopicsView]
	@PortalId int,
	@ModuleId int,
	@UserId int,
	@RowIndex int = 0,
	@MaxRows int = 20,
	@Sort nvarchar(10) = 'DESC',
	@IsSuperUser bit = 0
AS

DECLARE @RecordCount int

DECLARE @content TABLE 
	(
		contentId int, 
		authorId int,
		topicId int
	)
INSERT INTO @content (contentId, authorId, topicId)
Select t.contentId, tc.authorId, t.TopicId from {databaseOwner}{objectQualifier}activeforums_Topics as t INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft ON t.TopicId = ft.TopicId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Forums as F on ft.ForumId = f.ForumId AND f.ModuleId = @ModuleId and f.PortalId = @PortalId INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_Content as tc ON tc.ContentId = t.ContentId AND tc.AuthorId = @UserId AND t.IsApproved = 1 and t.IsDeleted = 0
INSERT INTO @content (contentId, authorId, topicId)
Select r.contentId, rc.AuthorId, r.topicId from {databaseOwner}{objectQualifier}activeforums_Replies as r INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_Content as rc ON rc.ContentId = r.ContentId AND r.IsApproved = 1 AND r.IsDeleted = 0 INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_Topics as t ON r.TopicId = t.TopicId INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft ON t.TopicId = ft.TopicId INNER JOIN
	{databaseOwner}{objectQualifier}activeforums_Forums as F on ft.ForumId = f.ForumId AND f.ModuleId = @ModuleId and f.PortalId = @PortalId
	LEFT OUTER JOIN
	@content as cnt on cnt.topicid = r.TopicId
WHERE rc.AuthorId = @UserId AND cnt.topicid IS NULL

DECLARE @topics TABLE 
	(
		topicId int
	)
INSERT INTO @Topics (topicId)
SELECT DISTINCT TopicId from @Content Order By TopicId

SET @RecordCount = (SELECT Count(TopicId) FROM @Topics)


	SELECT 
	ForumId,
	ForumName,
	LastReplyId,
	topics.TopicId,
	ViewCount,
	ReplyCount,
	IsLocked,
	IsPinned,
	TopicIcon,
	StatusId,
	IsAnnounce,
	AnnounceStart,
	AnnounceEnd,
	TopicType,
	[Subject],
	Summary,
	topics.AuthorId,
	AuthorName,
	Body,
	DateCreated,
	AuthorUserName,
	AuthorFirstName,
	AuthorLastName,
	AuthorDisplayName,
	LastReplySubject,
	LastReplySummary,
	LastReplyAuthorId,
	LastReplyAuthorName,
	LastReplyUserName,
	LastReplyFirstName,
	LastReplyLastName,
	LastReplyDisplayName,
	LastReplyDate,
	LastReplyRead,
	TopicRating,
	UserLastReplyRead,
	UserLastTopicRead,
	IsRead,
	"RecordCount" = @RecordCount
	FROM (

SELECT 
	f.ForumId,
	f.ForumName,
	IsNull(f.LastReplyId,0) as LastReplyId,
	t.TopicId,
	t.ViewCount,
	t.ReplyCount,
	t.IsLocked,
	t.IsPinned,
	IsNull(t.TopicIcon,'') as TopicIcon,
	t.StatusId,
	t.IsAnnounce,
	t.AnnounceStart,
	t.AnnounceEnd,
	t.TopicType,
	c.Subject,
	IsNull(c.Summary,'') as Summary,
	IsNull(c.AuthorId,-1) as AuthorId,
	IsNull(c.AuthorName,'') as AuthorName,
	c.Body,
	c.DateCreated,
	IsNull(u.Username,'') as AuthorUserName,
	IsNull(u.FirstName,'') as AuthorFirstName,
	IsNull(u.LastName,'') as AuthorLastName,
	IsNull(u.DisplayName,'') as AuthorDisplayName,
	CASE WHEN rc.Subject IS NULL THEN c.Subject ELSE rc.Subject END as LastReplySubject,
	CASE WHEN rc.Summary IS NULL THEN IsNull(c.Summary,'') ELSE rc.Summary END as LastReplySummary,
	CASE WHEN rc.AuthorId IS NULL THEN c.AuthorId ELSE rc.AuthorId END as LastReplyAuthorId,
	CASE WHEN rc.AuthorName IS NULL THEN IsNull(c.AuthorName,'') ELSE rc.AuthorName END  as LastReplyAuthorName,
	CASE WHEN ru.Username IS NULL THEN IsNull(u.UserName,'') ELSE ru.UserName END as LastReplyUserName,
	CASE WHEN ru.FirstName IS NULL THEN IsNULL(u.FirstName,'') ELSE ru.FirstName END as LastReplyFirstName,
	CASE WHEN ru.LastName IS NULL THEN IsNull(u.LastName,'') ELSE ru.LastName END as LastReplyLastName,
	CASE WHEN ru.DisplayName IS NULL THEN IsNull(IsNull(u.DisplayName,rc.AuthorName),'') ELSE ru.DisplayName END as LastReplyDisplayName,
	CASE WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END  as LastReplyDate,
	CASE WHEN TT.LastReplyId < ISNULL(f.LastReplyId,0) THEN TT.LastReplyId ELSE 0 END AS LastReplyRead, 
	CASE WHEN FT.MaxReplyRead > TT.LastReplyId OR TT.LastReplyID IS NULL THEN ISNULL(FT.MaxReplyRead,0) ELSE TT.LastReplyId END AS UserLastReplyRead, 
	CASE WHEN FT.MaxTopicRead > TT.TopicId OR TT.TopicId IS NULL THEN ISNULL(FT.MaxTopicRead,0) ELSE TT.TopicId END AS UserLastTopicRead,
	CASE WHEN (ISNULL(TT.LastReplyID,0) = 0) OR F.LastReplyID <= tt.LastReplyId OR ISNULL(FT.MaxTopicRead,0) >= t.TopicId THEN 1 ELSE 0 END AS IsRead,
	(SELECT     ISNULL(AVG(Rating), 0) AS Expr1
                            FROM	{databaseOwner}{objectQualifier}activeforums_Topics_Ratings
                            WHERE      (TopicId = T.TopicId)) AS TopicRating, 
						ROW_NUMBER() OVER (ORDER BY 
								CASE
									WHEN rc.DateCreated IS NULL THEN c.DateCreated ELSE rc.DateCreated END DESC
											) as RowRank
				
		FROM	@topics as tmp INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Topics as t on tmp.TopicId = t.TopicId INNER JOIN			
				{databaseOwner}{objectQualifier}activeforums_ForumTopics AS ftt ON ftt.TopicId = t.TopicId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_forums as f ON ftt.forumId = f.ForumId INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as c on t.ContentId = c.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as u on c.AuthorId = u.UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Replies as r on ftt.LastReplyId = r.ReplyId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}Users as ru on rc.AuthorId = ru.UserId LEFT OUTER JOIN				
                {databaseOwner}{objectQualifier}activeforums_Topics_Tracking AS TT ON T.TopicId = TT.TopicId AND TT.UserId = @UserId LEFT OUTER JOIN
				{databaseOwner}{objectQualifier}activeforums_Forums_Tracking as FT ON f.ForumId = FT.ForumId AND FT.UserId = @UserId
		WHERE f.PortalId = @PortalId AND f.ModuleId = @ModuleId
	) AS topics 
	WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TP_GetByUser]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_TP_GetByUser]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_TP_GetByUser]
@PortalId int,
@Rows int = 10,
@IsSuperUser bit,
@CurrentUserId int,
@FilteredUserId int,
@TopicsOnly bit = 0,
@ForumIds nvarchar(2000)
AS

IF @TopicsOnly = 0
BEGIN
SELECT TOP 10 [Subject], body, posts.datecreated, authorid, authorname, posts.forumid, topicId,f.ForumName,
	 u.userid, u.firstname as AuthorFirstName,u.lastname as AuthorLastName, u.displayname as AuthorDisplayName, u.Username as AuthorUserName,
	 m.ModuleId, m.TabId, g.GroupName, g.ForumGroupId, ReplyId, replycount
	FROM
		(
Select c.Subject, c.Body, c.DateCreated, c.AuthorId, c.AuthorName, ISNULL(ft.forumid,rft.forumid) as forumid, ISNULL(t.topicid,rt.TopicId) as TopicId, IsNull(r.ReplyId,0) as ReplyId,
	ISNULL(t.ReplyCount,0) as Replycount from {databaseOwner}{objectQualifier}activeforums_Content as c 
LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Replies as r on r.contentid = c.contentId and r.isapproved = 1 and r.isdeleted = 0
LEFT JOIN {databaseOwner}{objectQualifier}activeforums_Topics as rt on r.topicid = rt.topicId
LEFT JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics as rft on rt.topicid = rft.topicid
LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t on t.contentid = c.contentid and t.isapproved = 1 and t.isdeleted = 0
LEFT JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid
where c.authorid = @FilteredUserId

		) as posts INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,':') as fids on posts.ForumId = fids.ID 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_forums as f on fids.id = f.forumid 
		INNER JOIN {databaseOwner}{objectQualifier}users as u on u.userid = posts.authorid
		INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON f.ModuleId = M.ModuleId
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on g.forumgroupid = f.forumgroupid
Order By posts.DateCreated DESC
END
ELSE
SELECT TOP 10 contentid, [Subject], body, posts.datecreated, authorid, authorname, posts.forumid, topicId,f.ForumName,
	 u.userid, u.firstname as AuthorFirstName,u.lastname as AuthorLastName, u.displayname as AuthorDisplayName, u.Username as AuthorUserName,
	 m.ModuleId, m.TabId, g.GroupName, g.ForumGroupId, replyid, replycount
	FROM
		(
Select c.contentid, c.Subject, c.Body, c.DateCreated, c.AuthorId, c.AuthorName, ft.forumid, t.topicid, 0 as ReplyId, t.replycount  from {databaseOwner}{objectQualifier}activeforums_Content as c 
LEFT OUTER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t on t.contentid = c.contentid and t.isapproved = 1 and t.isdeleted = 0
LEFT JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid
where authorid = @FilteredUserId

		) as posts INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@ForumIds,':') as fids on posts.ForumId = fids.ID 
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_forums as f on fids.id = f.forumid 
		INNER JOIN {databaseOwner}{objectQualifier}users as u on u.userid = posts.authorid
		INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON f.ModuleId = M.ModuleId
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on g.forumgroupid = f.forumgroupid
Order By posts.datecreated DESC

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Attachments_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_Get]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_Get]
@AttachId int,
@ContentId int,
@UserId int,
@WithSecurity bit = 0
AS
If @WithSecurity = 0
SELECT AttachId, ContentId, IsNull(PostId,-1) as PostId, IsNull(UserId,-1) as UserId, [FileName], IsNull(DateAdded,'') as DateAdded, IsNull(DateUpdated,'') as DateUpdated,
	FileData, ContentType, FileSize, AllowDownload, DisplayInline, DownloadCount,ParentAttachId from {databaseOwner}{objectQualifier}activeforums_Attachments WHERE AttachId = @AttachId
ELSE
SELECT    A.AttachID, C.ContentId, IsNull(A.PostID,-1) as PostId, IsNull(A.UserID,-1) as UserId, A.Filename, A.DateAdded,
 A.DateUpdated, A.FileData, A.ParentAttachId, A.ContentType, A.FileSize, p.CanRead, A.AllowDownload, A.DisplayInline, A.DownloadCount
FROM         {databaseOwner}{objectQualifier}activeforums_Attachments AS A INNER JOIN
			{databaseOwner}{objectQualifier}activeforums_Content_Attachments as c on c.attachid = a.attachid INNER JOIN
             {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T ON c.ContentId = T.ContentId INNER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Forums as F on f.ForumId = t.ForumId INNER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Permissions as p on p.PermissionsId = f.PermissionsId 
					 
			   
WHERE A.AttachId = @AttachId 

GO

