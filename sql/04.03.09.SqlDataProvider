ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Content] ADD
	ContentItemId int NULL
GO

ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Topics] ADD
[NextTopic] [int] NULL,
[PrevTopic] [int] NULL
GO

ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Forums] ADD
	SocialGroupId int NOT NULL CONSTRAINT DF_{objectQualifier}activeforums_Forums_SocialGroupId DEFAULT -1,
	HasProperties bit NOT NULL CONSTRAINT DF_{objectQualifier}activeforums_Forums_HasProperties DEFAULT 0
GO

ALTER TABLE {databaseOwner}[{objectQualifier}activeforums_Content_Attachments] ADD
	FileURL nvarchar(255) NULL,
	FileName nvarchar(255) NULL,
	DisplayLink int NOT NULL CONSTRAINT DF_{objectQualifier}activeforums_Content_Attachments_DisplayLink DEFAULT 1,
	ContentType nvarchar(100) NULL
GO

CREATE NONCLUSTERED INDEX [IDX_{objectQualifier}ActiveForums_Topics_PrevTopic]
ON {databaseOwner}[{objectQualifier}activeforums_Topics] ([PrevTopic])
GO
CREATE NONCLUSTERED INDEX [IDX_ActiveForums_Topics_NextTopic]
ON {databaseOwner}[{objectQualifier}activeforums_Topics] ([NextTopic])
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_Move]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Move]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Reply_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Topics_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Delete]
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Reply_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forums_MoveForum]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forums_MoveForum]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Forum_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forum_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_UI_TopicView]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicView]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Settings_ListAll]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Settings_ListAll]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_TP_GetPosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_TP_GetPosts]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumContent_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumContent_List]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_ForumGet]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumGet]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_GetForumsForSocialGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_GetForumsForSocialGroup]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Attachments_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_Get]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_URL_Search]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_URL_Search]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_URL_Search]
@PortalId int,
@Url nvarchar(max)
AS
DECLARE @views TABLE(id int,viewname nvarchar(50))
INSERT INTO @views (id,viewname) VALUES (1,'unanswered');
INSERT INTO @views (id,viewname) VALUES (2,'notread');
INSERT INTO @views (id,viewname) VALUES (3,'mytopics');
INSERT INTO @views (id,viewname) VALUES (4,'activetopics');
SELECT TabId, ModuleID, ForumGroupId, ForumId, TopicId, Url,Archived,OtherId,UrlType FROM 
	(
		SELECT tb.TabID,m.ModuleId, g.ForumGroupId,f.ForumId,t.TopicId, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' + f.PrefixURL + '/' + t.URL + '/' as URL, 0 as Archived,-1 as OtherId,0 as URLType from {databaseOwner}{objectQualifier}activeforums_Topics as t
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft ON ft.TopicId = t.TopicId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.ForumId = ft.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId
			INNER JOIN {databaseOwner}{objectQualifier}ModuleSettings as s ON s.ModuleId = f.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = f.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}Tabs as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(t.URL,'') <> '' AND ISNULL(f.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,g.ForumGroupId,f.ForumId,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' + f.PrefixURL + '/' as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}{objectQualifier}activeforums_Forums as f
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId
			INNER JOIN {databaseOwner}{objectQualifier}ModuleSettings as s ON s.ModuleId = f.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = f.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}Tabs as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(f.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,g.ForumGroupId,-1,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) + g.PrefixURL + '/' as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}{objectQualifier}activeforums_Groups as g 
			INNER JOIN {databaseOwner}{objectQualifier}ModuleSettings as s ON s.ModuleId = g.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = g.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}Tabs as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND ISNULL(g.PrefixURL,'') <> ''
		UNION
		SELECT tb.TabID,m.ModuleId,-1,-1,-1, 
			(CASE WHEN s.SettingValue <> '' THEN s.SettingValue + '/' Else '' END) as URL, 0 as Archived,-1,0 FROM
			{databaseOwner}{objectQualifier}ModuleSettings as s 
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = s.ModuleId AND s.SettingName = 'URLBASE'
			INNER JOIN {databaseOwner}{objectQualifier}Tabs as tb ON tb.TabId = m.TabID
		WHERE tb.PortalID = @PortalId AND s.SettingValue <> ''
		UNION
		SELECT m.TabID,m.ModuleID,u.ForumGroupId,u.ForumId,u.TopicId, u.URL, 1 as Archived,-1,0 from {databaseOwner}{objectQualifier}activeforums_URL as u
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON u.ForumGroupId = g.ForumGroupId
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = g.ModuleId
		WHERE u.PortalId = @PortalId
		UNION
		SELECT TabId, ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId, 
			(CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + UrlOther + '/' + v.viewname + '/' as URL,0 as Archived,v.id,1 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}{objectQualifier}ModuleSettings as ss
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}Tabs as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLOTHER') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,UrlOther)) as pu,@views as v
		UNION
		SELECT TabId, pu.ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId,
		 (CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + URLCATS + '/' + REPLACE(LOWER(t.TagName),' ','-') + '/' as URL,0 as Archived,t.TagId,2 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}{objectQualifier}ModuleSettings as ss
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}Tabs as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLCATS') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,URLCATS)) as pu
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Tags as t ON t.ModuleId = pu.ModuleId AND t.IsCategory = 1
		UNION
		SELECT TabId, pu.ModuleId,-1 as ForumGroupId,-1 as ForumId,-1 as TopicId,
		 (CASE WHEN UrlBase <> '' THEN UrlBase + '/' Else '' END) + URLTAGS + '/' + REPLACE(LOWER(t.TagName),' ','-') + '/' as URL,0 as Archived,t.TagId,3 from (
			SELECT m.TabId, ss.ModuleId, SettingValue,SettingName FROM {databaseOwner}{objectQualifier}ModuleSettings as ss
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as m ON m.ModuleID = ss.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}Tabs as tb ON tb.TabId = m.TabID
			WHERE (SettingName = 'URLBASE' OR SettingName = 'URLTAGS') AND tb.PortalID = @PortalId
		) as s 
		PIVOT (MAX(SettingValue) for SettingName in (urlbase,URLTAGS)) as pu
		INNER JOIN {databaseOwner}{objectQualifier}activeforums_Tags as t ON t.ModuleId = pu.ModuleId AND t.IsCategory = 0
	) as urls
	WHERE LOWER(urls.URL) = @URL

GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_Get]
@AttachId int,
@ContentId int,
@UserId int,
@WithSecurity bit = 0
AS
If @WithSecurity = 0
SELECT AttachId, ContentId, IsNull(PostId,-1) as PostId, IsNull(UserId,-1) as UserId, [FileName], IsNull(DateAdded,'') as DateAdded, IsNull(DateUpdated,'') as DateUpdated,
	FileData, ContentType, FileSize, AllowDownload, DisplayInline, DownloadCount,ParentAttachId from {databaseOwner}{objectQualifier}activeforums_Attachments WHERE AttachId = @AttachId
ELSE
SELECT  TOP 1  ISNULL(A.AttachID, C.AttachId) as AttachId, C.ContentId, IsNull(A.PostID,-1) as PostId, IsNull(A.UserID,-1) as UserId, ISNULL(A.Filename, c.Filename) as [Filename], A.DateAdded,
 A.DateUpdated, A.FileData, ISNULL(A.ParentAttachId,-1) as ParentAttachId, ISNULL(A.ContentType, C.ContentType) as ContentType, ISNULL(A.FileSize,0) as FileSize, p.CanRead, IsNULL(A.AllowDownload,1) as AllowDownload, IsNull(A.DisplayInline, 1) as DisplayInline,
 ISNULL(A.DownloadCount,0) as DownloadCount, C.FileURL
FROM        {databaseOwner}{objectQualifier}activeforums_Content_Attachments as c LEFT OUTER JOIN
			{databaseOwner}{objectQualifier}activeforums_Attachments AS A on c.attachid = a.attachid INNER JOIN
            {databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T ON c.ContentId = T.ContentId INNER JOIN
			{databaseOwner}{objectQualifier}activeforums_Forums as F on f.ForumId = t.ForumId INNER JOIN
			{databaseOwner}{objectQualifier}activeforums_Permissions as p on p.PermissionsId = f.PermissionsId 
					 
			   
WHERE (A.AttachId = @AttachId OR C.AttachId = @AttachId)


GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev]
	@ForumId INT
	
AS
BEGIN
	
	SET NOCOUNT ON;

	WITH cteRank AS
	(
		SELECT    
			T.TopicId,
			ROW_NUMBER() OVER (ORDER BY c.DateCreated DESC, rc.DateCreated DESC) as RowRank
		FROM 
			{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft INNER JOIN 
			{databaseOwner}{objectQualifier}activeforums_Topics as T ON ft.TopicId = t.TopicId INNER JOIN
			{databaseOwner}{objectQualifier}activeforums_Content as C on t.ContentId = c.ContentId LEFT OUTER JOIN
			{databaseOwner}{objectQualifier}activeforums_Replies as r on ft.LastReplyId = r.ReplyId LEFT OUTER JOIN
			{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId 
		WHERE     
			(ft.ForumId = @ForumId)	
	)	
	UPDATE 
		{databaseOwner}{objectQualifier}activeforums_Topics
	SET
		NextTopic = n.topicid,
		PrevTopic = p.topicid
	/*
	SELECT 
		r.TopicId, 
		r.RowRank, 
		n.TopicId AS NextTopic, 
		n.RowRank AS NextRank,
		p.TopicId AS PrevTopic,
		p.RowRank AS PrevRank
	*/
	FROM 
		{databaseOwner}{objectQualifier}activeforums_Topics t INNER JOIN
		cteRank r ON t.TopicId = r.TopicId LEFT OUTER JOIN
		cteRank n ON r.RowRank = (n.RowRank+1) LEFT OUTER JOIN
		cteRank p ON r.RowRank = (p.RowRank-1);
		
		
		
		
	
	-- update the first and last - BY DATE
	DECLARE @MaxTopicId int, @MinTopicId int
	
	;WITH cteRank AS
	(
		SELECT    
			T.TopicId,
			ROW_NUMBER() OVER (ORDER BY c.DateCreated DESC, rc.DateCreated DESC) as RowRank
		FROM 
			{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft INNER JOIN 
			{databaseOwner}{objectQualifier}activeforums_Topics as T ON ft.TopicId = t.TopicId INNER JOIN
			{databaseOwner}{objectQualifier}activeforums_Content as C on t.ContentId = c.ContentId LEFT OUTER JOIN
			{databaseOwner}{objectQualifier}activeforums_Replies as r on ft.LastReplyId = r.ReplyId LEFT OUTER JOIN
			{databaseOwner}{objectQualifier}activeforums_Content as rc on r.ContentId = rc.ContentId 
		WHERE     
			(ft.ForumId = @ForumId)	
	)	
	SELECT 
		@MaxTopicId = MAX(topicid), 
		@MinTopicId = MIN(topicid) 
	FROM 
		cteRank
	
	-- update first
	UPDATE 
		{databaseOwner}{objectQualifier}activeforums_Topics 
	SET 
		PrevTopic = @MaxTopicId 
	FROM
		{databaseOwner}{objectQualifier}activeforums_Topics t INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_ForumTopics f ON t.TopicId = f.TopicId
	WHERE 
		PrevTopic IS NULL 
		AND f.ForumId = @ForumId
	
	-- update last
	UPDATE 
		{databaseOwner}{objectQualifier}activeforums_Topics 
	SET 
		NextTopic = @MinTopicId 
	FROM
		{databaseOwner}{objectQualifier}activeforums_Topics t INNER JOIN
		{databaseOwner}{objectQualifier}activeforums_ForumTopics f ON t.TopicId = f.TopicId
	WHERE 
		NextTopic IS NULL 
		AND f.ForumId = @ForumId
END

GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_SaveToForum]
@ForumId int,
@TopicId int,
@LastReplyId int
AS
BEGIN
DECLARE @LastPostId int 
DECLARE @tmpLastPostId int
SET @LastPostId = 0
SET @tmpLastPostId = -1
DECLARE @Subject nvarchar(250)
DECLARE @AuthorName nvarchar(150)
DECLARE @AuthorId int
DECLARE @PostDate datetime
DECLARE @LastTopicId int
DECLARE @ReplyId int

IF EXISTS (SELECT TopicId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE ForumId = @ForumId AND TopicId = @TopicId)
	BEGIN
			
		IF @LastReplyId > 0
			BEGIN
			SET @tmpLastPostId = (SELECT MAX(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
			DECLARE @LastReplyDate int
			SET @LastReplyDate = (SELECT DATEDIFF(ss,'01/01/1970 00:00:00 AM',rc.DATECREATED) FROM {databaseOwner}{objectQualifier}activeforums_Content as rc INNER JOIN {databaseOwner}{objectQualifier}activeforums_Replies as r ON r.ContentId = rc.ContentId WHERE ReplyId = @tmpLastPostId)
			UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics
			SET LastReplyId = @tmpLastPostId,
			 LastReplyDate = @LastReplyDate 
			 WHERE ForumId = @ForumId AND TopicId = @TopicId


			END
	END
ELSE
	BEGIN
	
	IF @LastReplyId = -1
		SET @LastReplyId = Null
		DECLARE @LastTopicDate int
		SET @LastTopicDate = (SELECT DATEDIFF(ss,'01/01/1970 00:00:00 AM',tc.DATECREATED) FROM {databaseOwner}{objectQualifier}activeforums_Content as tc INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t ON t.ContentId = tc.ContentId WHERE TopicId = @TopicId)
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_ForumTopics
			(ForumId, TopicId, LastReplyId, LastTopicDate, LastReplyDate)
			VALUES
			(@ForumId, @TopicId, @LastReplyId, @LastTopicDate, @LastTopicDate)

		
	END
END

exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @ForumId


-- reset thread order
EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @ForumId


GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Save]
@PortalId int,
@TopicId int,
@ViewCount int,
@ReplyCount int,
@IsLocked bit,
@IsPinned bit,
@TopicIcon nvarchar(25),
@StatusId int,
@IsApproved bit,
@IsDeleted bit,
@IsAnnounce bit,
@IsArchived bit,
@AnnounceStart datetime,
@AnnounceEnd datetime,
@Subject nvarchar(255),
@Body ntext,
@Summary ntext,
@DateCreated datetime,
@DateUpdated datetime,
@AuthorId int,
@AuthorName nvarchar(150),
@IPAddress nvarchar(50),
@TopicType int,
@Priority int,
@URL nvarchar(1000),
@TopicData nvarchar(max)
AS
DECLARE @ContentId int
DECLARE @ForumId int
DECLARE @ForumGroupId int
DECLARE @ModuleId int
SET @ForumId = -1
SET @ModuleId = -1
DECLARE @ApprovedStatus bit
SET @ApprovedStatus = @IsApproved
DECLARE @currURL nvarchar(1000)
IF @URL <> '' AND @TopicId>0
BEGIN
	SET @ForumId = (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @TopicId)
	SET @ModuleId = (SELECT ModuleId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId= @ForumId)
	SET @ForumGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId= @ForumId)
	SET @currURL = {databaseOwner}{objectQualifier}fn_activeforums_GetURL(@ModuleId,@ForumGroupId,@ForumId,@TopicId,-1,-1)
	IF @currURL <> ''
		BEGIN
			DECLARE @newURL nvarchar(1000)
			SET @newURL = {databaseOwner}{objectQualifier}fn_activeforums_GetURL(@ModuleID,@ForumGroupId, @ForumId,-1,-1,-1) + @URL + '/'
			IF LTRIM(RTRIM(LOWER(@newURL))) <> LTRIM(RTRIM(LOWER(@currURL))) 
				BEGIN
					exec {databaseOwner}{objectQualifier}activeforums_URL_Archive @PortalId,@ForumGroupId, @ForumId, @TopicId, @currURL
				END
		END
END
IF EXISTS(SELECT ContentId FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @TopicId)
	BEGIN
		SELECT @ApprovedStatus = IsApproved, @ContentId = ContentId FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @TopicId

		BEGIN
			UPDATE {databaseOwner}{objectQualifier}activeforums_Content
				SET Subject = @Subject,
					Body = @Body,
					Summary = @Summary,
					DateCreated = @DateCreated,
					DateUpdated = @DateUpdated,
					AuthorId = @AuthorId,
					AuthorName = @AuthorName,
					IsDeleted = @IsDeleted
				WHERE ContentId = @ContentId
			UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
				SET ViewCount = @ViewCount,
					ReplyCount = @ReplyCount,
					IsLocked = @IsLocked,
					IsPinned = @IsPinned,
					TopicIcon = @TopicIcon,
					StatusId = @StatusId,
					IsApproved = @IsApproved,
					IsDeleted = @IsDeleted,
					IsAnnounce = @IsAnnounce,
					IsArchived = @IsArchived,
					AnnounceStart = @AnnounceStart,
					AnnounceEnd = @AnnounceEnd,
					TopicType = @TopicType,
					Priority = @Priority,
					URL = @URL,
					TopicData = @TopicData
				WHERE TopicId = @TopicId	
		END
	END
ELSE

BEGIN
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Content
			(Subject, Body, Summary, DateCreated, DateUpdated, AuthorId, AuthorName, IsDeleted, IPAddress)
			VALUES
			(@Subject, @Body, @Summary, @DateCreated, @DateUpdated, @AuthorId, @AuthorName, @IsDeleted, @IPAddress)
		SET @ContentId = SCOPE_IDENTITY()
	END
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Topics
			(ContentId, ViewCount, ReplyCount, IsLocked, IsPinned, TopicIcon, StatusId, IsApproved, IsDeleted, IsAnnounce, IsArchived, TopicType, AnnounceStart, AnnounceEnd, Priority, URL, TopicData)
			VALUES
			(@ContentId, @ViewCount, @ReplyCount, @IsLocked, @IsPinned, @TopicIcon, @StatusId, @IsApproved, @IsDeleted, @IsAnnounce, @IsArchived, @TopicType, @AnnounceStart, @AnnounceEnd, @Priority, @URL, @TopicData)
		SET @TopicId = SCOPE_IDENTITY()
		
	END

END
BEGIN
IF @IsApproved = 1 And @AuthorId > 0 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles 
			SET DateLastPost = GetDate()
			WHERE UserId = @AuthorId AND PortalId = @PortalId
	END
END
SELECT @TopicId


-- reset thread order
IF @ForumId > -1
	EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @ForumId
	
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Move]
@PortalId int,
@ModuleId int,
@ForumId int,
@TopicId int
AS
DECLARE @OldForumId int
SELECT @OldForumId = ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @TopicId
If @OldForumId <> @ForumId 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics SET ForumId = @ForumId WHERE TopicId = @TopicId AND ForumId = @OldForumId
		--UPDATE Counts
		DECLARE @LastPostId int
		-- New Forum
		DECLARE @LastReplyId int
		DECLARE @LastTopicId int
		SET @LastReplyId = (SELECT MAX(r.ReplyId) FROM {databaseOwner}{objectQualifier}activeforums_Replies as r inner join {databaseOwner}{objectQualifier}activeforums_topics as t on r.topicid = t.topicid inner join {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid  WHERE r.IsApproved = 1 AND r.IsDeleted = 0 AND ft.forumid = @ForumId)
		SET @LastTopicId = (SELECT MAX(t.TopicId) FROM {databaseOwner}{objectQualifier}activeforums_Topics as t inner join {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid  WHERE t.IsApproved = 1 AND t.IsDeleted = 0 AND ft.forumid = @ForumId)
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET LastReplyId = IsNull(@LastReplyId,0), LastTopicId = ISNULL(@LastTopicId,0) WHERE ForumId = @ForumId

		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET LastPostId = ISNULL((CASE WHEN IsNull(@LastReplyId,0) > @LastTopicId THEN @LastReplyId ELSE @LastTopicId END),0), 
			TotalTopics = ISNULL((SELECT Count(TopicId) FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView WHERE ForumId = @ForumId),0),
			TotalReplies = ISNULL((SELECT Count(ReplyId) FROM {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies WHERE ForumId = @ForumId),0)
			WHERE ForumId = @ForumId
		-- Old Forum
		SET @LastReplyId = (SELECT MAX(r.ReplyId) FROM {databaseOwner}{objectQualifier}activeforums_Replies as r inner join {databaseOwner}{objectQualifier}activeforums_topics as t on r.topicid = t.topicid inner join {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid  WHERE r.IsApproved = 1 AND r.IsDeleted = 0 AND ft.forumid = @OldForumId )
		SET @LastTopicId = (SELECT MAX(t.TopicId) FROM {databaseOwner}{objectQualifier}activeforums_Topics as t inner join {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on t.topicid = ft.topicid  WHERE t.IsApproved = 1 AND t.IsDeleted = 0 AND ft.forumid = @OldForumId )
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET LastReplyId = IsNull(@LastReplyId,0), LastTopicId = ISNULL(@LastTopicId,0) WHERE ForumId = @OldForumId

		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET LastPostId = ISNULL((CASE WHEN IsNull(@LastReplyId,0) > @LastTopicId THEN @LastReplyId ELSE @LastTopicId END),0), 
			TotalTopics = IsNULL((SELECT Count(TopicId) FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView WHERE ForumId = @OldForumId),0),
			TotalReplies = IsNULL((SELECT Count(ReplyId) FROM {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies WHERE ForumId = @OldForumId),0)
			WHERE ForumId = @OldForumId
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Forums_Tracking WHERE ForumId = @OldForumId AND MaxTopicRead = @TopicId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics_Tracking SET ForumId = @ForumId WHERE TopicId = @TopicId AND ForumId = @OldForumId
	END
	exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @ForumId
	exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @OldForumId


-- reset thread order
EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @ForumId
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Save]
@PortalId int,
@TopicId int,
@ReplyId int,
@ReplyToId int,
@StatusId int,
@IsApproved bit,
@IsDeleted bit,
@Subject nvarchar(255),
@Body ntext,
@DateCreated datetime,
@DateUpdated datetime,
@AuthorId int,
@AuthorName nvarchar(150),
@IPAddress nvarchar(50)
AS
DECLARE @ContentId int
DECLARE @IsEdit bit
SET @IsEdit = 0
DECLARE @ApprovedStatus bit
SET @ApprovedStatus = @IsApproved
IF EXISTS(SELECT ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE ReplyId = @ReplyId)
	BEGIN
		SELECT @ContentId = ContentId, @ApprovedStatus = IsApproved FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE ReplyId = @ReplyId
		
		BEGIN
			SET @IsEdit = 1
			UPDATE {databaseOwner}{objectQualifier}activeforums_Content
				SET Subject = @Subject,
					Body = @Body,
					DateCreated = @DateCreated,
					DateUpdated = @DateUpdated,
					AuthorId = @AuthorId,
					AuthorName = @AuthorName,
					IsDeleted = @IsDeleted,
					IPAddress = @IPAddress
				WHERE ContentId = @ContentId
			UPDATE {databaseOwner}{objectQualifier}activeforums_Replies
				SET StatusId = @StatusId,
					TopicId = @TopicId,
					IsApproved = @IsApproved,
					IsDeleted = @IsDeleted,
					ReplyToId = @ReplyToId					
				WHERE ReplyId = @ReplyId	
		END
	END
ELSE
--INSERT
BEGIN
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Content
			(Subject, Body, DateCreated, DateUpdated, AuthorId, AuthorName, IsDeleted, IPAddress)
			VALUES
			(@Subject, @Body, @DateCreated, @DateUpdated, @AuthorId, @AuthorName, @IsDeleted, @IPAddress)
		SET @ContentId = SCOPE_IDENTITY()
	END
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}activeforums_Replies
			(ContentId, TopicId, StatusId, IsApproved, IsDeleted, ReplyToId)
			VALUES
			(@ContentId, @TopicId, @StatusId, @IsApproved, @IsDeleted, @ReplyToId)
		SET @ReplyId = SCOPE_IDENTITY()
		
	END
	

END
IF @IsApproved = 1
	BEGIN
		DECLARE @ForumId int
		SELECT @ForumId = ForumId FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE TopicId = @TopicId
		DECLARE @TotalReplies int
		SET @TotalReplies = (SELECT Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_replies as r inner join {databaseOwner}{objectQualifier}activeforums_topics as t on t.topicid = r.topicid and r.isapproved = 1 and r.isdeleted = 0 INNER JOIN {databaseOwner}{objectQualifier}activeforums_forumtopics as ft on t.topicid = ft.topicid WHERE ft.forumid = @ForumId)
		DECLARE @LastReplyDate int
		SET @LastReplyDate = (SELECT DATEDIFF(ss,'01/01/1970 00:00:00 AM',rc.DATECREATED) FROM {databaseOwner}{objectQualifier}activeforums_Content as rc INNER JOIN {databaseOwner}{objectQualifier}activeforums_Replies as r ON r.ContentId = rc.ContentId WHERE ReplyId = @ReplyId)
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums 
		SET LastPostSubject = @Subject, LastPostAuthorName = @AuthorName, LastPostAuthorId = IsNull(@AuthorId,-1), 
			LastPostDate = @DateCreated, LastTopicId = IsNull(@TopicId,0), LastReplyId = IsNull(@ReplyId,0),
			TotalReplies = ISNULL(@TotalReplies,0)
		WHERE ForumId = @ForumId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
			SET ReplyCount = (Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
			WHERE TopicId = @TopicId
			If @IsEdit = 0
				UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics SET LastReplyId = @ReplyId, LastReplyDate = @LastReplyDate 	WHERE TopicId = @TopicId
			IF @AuthorId > 0
				UPDATE {databaseOwner}{objectQualifier}activeforums_UserProfiles 
					SET ReplyCount = ISNULL((Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies as r INNER JOIN 
							{databaseOwner}{objectQualifier}activeforums_Content as c ON r.ContentId = c.ContentId AND c.AuthorId=@AuthorId INNER JOIN
							{databaseOwner}{objectQualifier}activeforums_ForumTopics as ft ON ft.TopicId = r.TopicId INNER JOIN
							{databaseOwner}{objectQualifier}activeforums_Forums as f ON ft.ForumId = f.ForumId
							WHERE r.IsApproved = 1 AND r.IsDeleted=0 AND f.PortalId=@PortalId),0)
					WHERE UserId = @AuthorId AND PortalId = @PortalId					
			
		
		-- reset thread order
		EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @ForumId
	END
SELECT @ReplyId





GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Topics_Delete]
@ForumId int,
@TopicId int,
@DelBehavior int,
@UpdateStats bit = 1
AS
DECLARE @ContentId int
SELECT @ContentId = ContentId FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @TopicId
BEGIN
IF @DelBehavior = 1
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Content SET IsDeleted = 1 WHERE ContentId = @ContentId OR ContentId IN (Select ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId)
		UPDATE {databaseOwner}{objectQualifier}activeforums_Topics SET IsDeleted = 1 WHERE TopicId = @TopicId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Replies SET IsDeleted = 1 WHERE TopicId = @TopicId
	END
ELSE
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE ForumId = @ForumId AND TopicId = @TopicId
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Topics WHERE TopicId = @TopicId
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Content WHERE ContentId = @ContentId 
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Content WHERE ContentId IN (Select ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId)		
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Topics_Tags WHERE TopicId = @TopicId
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Topics_Ratings WHERE TopicId = @TopicId
	END
END
exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @ForumId


-- reset thread order
EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @ForumId
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Reply_Delete]
@ForumId int,
@TopicId int,
@ReplyId int,
@DelBehavior int
AS
DECLARE @ContentId int
SELECT @ContentId = ContentId FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND ReplyId = @ReplyId
BEGIN
IF @DelBehavior = 1
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Replies SET IsDeleted = 1 WHERE TopicId = @TopicId AND ReplyId = @ReplyId
	END
ELSE
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND ReplyId = @ReplyId
		DELETE FROM {databaseOwner}{objectQualifier}activeforums_Content WHERE ContentId = @ContentId 
	END
END
UPDATE {databaseOwner}{objectQualifier}activeforums_Topics
SET ReplyCount = ISNULL((Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1),0)
WHERE TopicId = @TopicId
DECLARE @LastTopicReply int
SET @LastTopicReply = (SELECT MAX(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsApproved = 1 AND IsDeleted = 0)
UPDATE {databaseOwner}{objectQualifier}activeforums_ForumTopics SET LastReplyId = IsNull(@LastTopicReply,0) WHERE ForumId = @ForumId and TopicId = @TopicId
exec {databaseOwner}{objectQualifier}activeforums_Forums_LastUpdates @ForumId


-- reset thread order
EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @ForumId
GO


CREATE PROCEDURE  {databaseOwner}[{objectQualifier}activeforums_Forums_MoveForum](
@ModuleId int,
@ForumID int, 
@SortDirection int
)
AS
BEGIN
DECLARE @currIndex int
DECLARE @newIndex int
DECLARE @tmpForumId int
DECLARE @forumGroupId int
DECLARE @ParentForumId int
SET @ParentForumId = (SELECT ParentForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ForumId = @ForumId)
SET @currIndex = (SELECT SortOrder FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId and ForumId = @ForumId)
SET @forumGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId and ForumId = @ForumId)
SET @tmpForumId = (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ParentForumId = @ParentForumId AND ForumGroupId = @ForumGroupId AND SortOrder = (@currIndex + @SortDirection))
IF @tmpForumId >= 0 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET SortOrder = (@currIndex + @SortDirection) WHERE ModuleId = @ModuleId AND ForumId = @ForumId
		UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET SortOrder = @currIndex WHERE ModuleId = @ModuleId AND ForumId = @tmpForumId
	END

END

GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Forum_Save]
@PortalId int,
@ForumId int,
@ModuleId int,
@ForumGroupId int,
@ParentForumId int,
@ForumName nvarchar(255),
@ForumDesc nvarchar(2000),
@SortOrder int,
@Active bit,
@Hidden bit,
@ForumSettingsKey varchar(255) = '',
@PermissionsId int,
@PrefixURL nvarchar(50),
@SocialGroupId int,
@HasProperties bit
AS
IF @PrefixURL <> '' AND @ForumId >0
	BEGIN
		DECLARE @currURL nvarchar(1000)
		SET @currURL = {databaseOwner}{objectQualifier}fn_activeforums_GetURL(@ModuleId,@ForumGroupId, @ForumId,-1,-1,-1)
		DECLARE @newURL nvarchar(1000)
		SET @currURL = {databaseOwner}{objectQualifier}fn_activeforums_GetURL(@ModuleId, @ForumGroupId, -1,-1,-1,-1) + @PrefixURL + '/'
	IF LTRIM(RTRIM(LOWER(@newURL))) <> LTRIM(RTRIM(LOWER(@currURL)))
		BEGIN
			exec {databaseOwner}{objectQualifier}activeforums_URL_Archive @PortalId,@ForumGroupId, @ForumId, -1, @currURL
		END
	END
IF EXISTS (SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId AND ModuleId = @ModuleId)
	BEGIN
	DECLARE @curGroupId int 
	DECLARE @curParentForumId int
	BEGIN
	IF @ForumSettingsKey = ''
		SET @ForumSettingsKey = (SELECT ForumSettingsKey FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
	END
		SET @curGroupId = (SELECT ForumGroupId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
		SET @curParentForumId = (SELECT ParentForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE ForumId = @ForumId)
		
	IF @curGroupId <> @ForumGroupId OR @curParentForumId <> @ParentForumId
		BEGIN
		DECLARE @MaxSort int
		SET @MaxSort = (SELECT MAX(SortOrder) from {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleId = @ModuleId AND ParentForumId = @ParentForumId AND ForumGroupId = @ForumGroupId)
		IF @MaxSort IS NULL
			SET @MaxSort = 0
		ELSE
			SET @MaxSort = @MaxSort + 1
		
		UPDATE {databaseOwner}{objectQualifier}activeforums_forums SET SortOrder = @MaxSort, ForumGroupId = @ForumGroupId WHERE ForumId = @ForumId --and ForumGroupID = @ForumGroupID
		exec {databaseOwner}{objectQualifier}activeforums_Forums_RepairSort @curGroupId, @curParentForumId
		exec {databaseOwner}{objectQualifier}activeforums_Forums_RepairSort @ForumGroupID, @ParentForumId
		END
	UPDATE {databaseOwner}{objectQualifier}activeforums_Forums
	SET PortalId = @PortalId, ForumGroupId = @ForumGroupId, ParentForumId = @ParentForumId, ForumName = @ForumName,
	ForumDesc = @ForumDesc,  Active = @Active, Hidden = @Hidden, DateUpdated = GetDate(), ForumSettingsKey = @ForumSettingsKey, ForumSecurityKey = @ForumSettingsKey,
	PermissionsId = @PermissionsId,
	PrefixURL = @PrefixURL,
	SocialGroupId = @SocialGroupId,
	HasProperties = @HasProperties
	WHERE ForumId = @ForumId AND ModuleId = @ModuleId
	END
	
ELSE
	BEGIN
	SELECT @SortOrder = (Max(SortOrder) + 1) From {databaseOwner}{objectQualifier}activeforums_Forums WHERE ModuleID=@ModuleID and ForumGroupID = @ForumGroupID 
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_Forums
		(PortalId, ModuleId, ForumGroupId, ParentForumId, ForumName, ForumDesc, SortOrder, Active, Hidden, PermissionsId, PrefixURL, SocialGroupId, HasProperties)
		VALUES
		(@PortalId, @ModuleId, @ForumGroupId, @ParentForumId, @ForumName, @ForumDesc, IsNull(@SortOrder,0), @Active, @Hidden, @PermissionsId, @PrefixURL, @SocialGroupId, @HasProperties)
	SET @ForumId = SCOPE_IDENTITY()
		BEGIN
			IF @ForumSettingsKey = ''
				UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET ForumSettingsKey = 'F:' + CAST(@ForumId as varchar(50)), ForumSecurityKey = 'F:' + CAST(@ForumId as varchar(50)) WHERE ForumId = @ForumId
			ELSE
				UPDATE {databaseOwner}{objectQualifier}activeforums_Forums SET ForumSettingsKey = @ForumSettingsKey, ForumSecurityKey = @ForumSettingsKey WHERE ForumId = @ForumId
		END
	END
SELECT @ForumId


-- reset thread order
EXEC {databaseOwner}{objectQualifier}activeforums_SaveTopicNextPrev @ForumId
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_UI_TopicView]
@PortalId int,
@ModuleId int,
@ForumId int,
@TopicId int,
@UserId int,
@RowIndex int, 
@MaxRows int,
@IsSuperUser bit = 0,
@Sort varchar(10) = 'ASC'
AS
--Forum/Group/Topic Info
DECLARE @LastPostId int
DECLARE @ReplyCount int
SET @ReplyCount = (Select Count(ReplyId) from {databaseOwner}{objectQualifier}activeforums_Replies WHERE TopicId = @TopicId AND IsDeleted = 0 AND IsApproved = 1)
DECLARE @Tags nvarchar(1000)
SET @Tags= RTRIM(IsNull({databaseOwner}{objectQualifier}activeforums_Topics_GetTags(@TopicId),''))
BEGIN
SELECT     
	v.ForumGroupId, 
	v.ModuleId, 
	v.GroupName, 
	v.GroupActive, 
	v.GroupHidden, 
	v.ForumId, 
	v.ParentForumId, 
	v.ForumName, 
	v.ForumDesc, 
	v.ForumActive, 
	v.ForumHidden, 
	v.TotalTopics, 
	ISNULL(v.TotalReplies, 0) AS TotalReplies,
	v.LastPostId,
	v.GroupSettingsKey,
	v.ForumSettingsKey,
	TopicTemplateId = IsNull((SELECT SettingValue FROM {databaseOwner}{objectQualifier}activeforums_Settings WHERE SettingName = 'TOPICTEMPLATEID' and GroupKey = v.ForumSettingsKey),0),
	
						  IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS activeforums_Settings_1
							WHERE      (SettingName = 'ALLOWRSS') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowRSS,
						  IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS activeforums_Settings_3
							WHERE      (SettingName = 'ALLOWHTML') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowHTML,
						  IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings AS activeforums_Settings_2
							WHERE      (SettingName = 'ALLOWSCRIPT') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowScript,
							IsNull((SELECT     SettingValue
							FROM          {databaseOwner}{objectQualifier}activeforums_Settings
							WHERE      (SettingName = 'ALLOWTAGS') AND (GroupKey = v.ForumSettingsKey)),0) AS AllowTags,
							 FT.TopicId,
						  (SELECT     ISNULL(AVG(Rating), 0) AS Expr1
							FROM          {databaseOwner}{objectQualifier}activeforums_Topics_Ratings
							WHERE      (TopicId = @TopicId)) AS TopicRating,
ISNULL
						  ((SELECT     Id
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions
							  WHERE     (ForumId = @ForumId) AND (TopicId = @TopicId) AND (UserId = @UserId)), 0) AS IsSubscribedTopic, ISNULL
						  ((SELECT     Id
							  FROM         {databaseOwner}{objectQualifier}activeforums_Subscriptions AS activeforums_Subscriptions_1
							  WHERE     (ForumId = @ForumId) AND (TopicId = 0) AND (UserId = @UserId)), 0) AS IsSubscribedForum,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.DateCreated,'') ELSE IsNull(R.DateCreated,'') END AS LastPostDate, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.AuthorId,'') ELSE IsNull(R.AuthorId,'') END AS LastPostAuthorId, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.AuthorName,'') ELSE IsNull(R.AuthorName,'') END AS LastPostAuthorName,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.UserName,'') ELSE IsNull(R.Username,'') END AS LastPostUserName,
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.FirstName,'') ELSE IsNull(R.FirstName,'') END AS LastPostFirstName, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.LastName,'') ELSE IsNull(R.LastName,'') END AS LastPostLastName, 
						CASE WHEN FT.LastReplyId is NULL THEN IsNull(T.DisplayName,'') ELSE IsNull(R.DisplayName,'') END AS LastPostDisplayName, T.Subject, T.Summary, T.Body, T.AuthorId, T.AuthorName, T.Username, T.FirstName, T.LastName, 
					  T.DisplayName, T.DateCreated, T.DateUpdated, T.ViewCount, @ReplyCount as ReplyCount, T.IsPinned, T.IsLocked, T.StatusId, T.TopicIcon, T.TopicType, @Tags as Tags,ISNULL(t.TopicData,'') as TopicData,
					  {databaseOwner}{objectQualifier}activeforums_Poll.PollID,
					aft.NextTopic, 
					aft.PrevTopic,
					t.URL,
					T.AuthorName as TopicAuthor
FROM
	{databaseOwner}{objectQualifier}activeforums_Topics aft INNER JOIN          
	{databaseOwner}{objectQualifier}activeforums_ForumTopics AS FT ON aft.TopicId = FT.TopicId INNER JOIN
					  {databaseOwner}{objectQualifier}vw_activeforums_GroupForum AS v ON FT.ForumId = v.ForumId INNER JOIN
					  {databaseOwner}{objectQualifier}vw_activeforums_ForumTopics AS T ON FT.TopicId = T.TopicId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}vw_activeforums_ForumReplies AS R ON FT.LastReplyId = R.ReplyId AND FT.LastReplyId IS NOT NULL LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Poll ON T.TopicId = {databaseOwner}{objectQualifier}activeforums_Poll.TopicId
WHERE     (v.ForumActive = 1) AND (v.ModuleId = @ModuleId) AND (v.ForumId = @ForumId) AND (FT.TopicId = @TopicId)
END
--Forum Security
BEGIN
	Select p.* from {databaseOwner}{objectQualifier}activeforums_Permissions as p INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f ON f.PermissionsId = p.PermissionsId WHERE f.ForumId = @ForumId
	
END
--Get Topic and Replies
	SELECT	ForumId, TopicId, ReplyId, [Subject], Summary, AuthorId, StatusId, AuthorName, UserName, FirstName, LastName,
			DisplayName, DateCreated, DateUpdated, Body, TopicCount, ReplyCount, ViewCount, AnswerCount,
			RewardPoints, UserDateCreated, DateLastActivity, UserCaption, [Signature], SignatureDisabled,
			UserPostCount, UserTotalPoints,IPAddress,Avatar,AvatarType,AvatarDisabled,Yahoo,MSN,ICQ,AOL,Occupation,Location,Interests,WebSite,MemberSince,
			ContentId,IsUserOnline,ReplyToId,	UserRoles = {databaseOwner}{objectQualifier}activeforums_UserProfiles_GetUserRoles(AuthorId, @PortalID, GetDate(),0),
			@Tags as Tags
			
	FROM
			(
			SELECT	T.ForumId, T.TopicId, T.ReplyId, T.Subject, T.Summary, T.AuthorId, T.StatusId, IsNull(T.AuthorName,'anon') as AuthorName, IsNull(T.Username,IsNull(T.AuthorName,'anon')) as Username,
			IsNull(T.FirstName,'') as FirstName, IsNull(T.LastName,'') as LastName,IsNull(T.DisplayName,T.AuthorName) as DisplayName,
			T.DateCreated, T.DateUpdated, C.Body, IsNull(P.TopicCount,0) as TopicCount, IsNull(P.ReplyCount,0) as ReplyCount,
			IsNull(P.ViewCount,0) as ViewCount, IsNull(P.AnswerCount,0) as AnswerCount, IsNull(P.RewardPoints,0) as RewardPoints,
			IsNull(P.DateCreated,'') AS UserDateCreated, IsNull(P.DateLastActivity,'') as DateLastActivity, 
			IsNull(P.UserCaption,'') as UserCaption, IsNull(P.Signature,'') as [Signature], IsNull(P.SignatureDisabled,0) as SignatureDisabled, 
			UserPostCount = (IsNull(P.TopicCount,0) + IsNull(P.ReplyCount,0)), 
			UserTotalPoints = (IsNull(P.TopicCount,0) + IsNull(P.ReplyCount,0) + IsNull(P.AnswerCount,0) + IsNull(P.RewardPoints,0)),
			C.IPAddress, IsNull(P.Avatar,'') as Avatar, IsNull(P.AvatarType,0) as AvatarType, IsNull(P.AvatarDisabled,0) as AvatarDisabled,
			IsNull(P.Yahoo,'') as Yahoo, IsNull(P.MSN,'') as MSN, IsNull(P.ICQ,'') as ICQ, IsNull(P.AOL,'') as AOL, IsNull(P.Occupation,'') as Occupation, 
			IsNull(P.Location,'') as Location, IsNull(P.Interests,'') as Interests, IsNull(P.WebSite,'') as WebSite, IsNull(P.DateCreated,'') as MemberSince,
			C.ContentId, IsUserOnline = (CASE WHEN DATEDIFF(mi,p.DateLastActivity,GetDate()) <=1 THEN 1 ELSE 0 END),T.ReplyToId,
			ROW_NUMBER() OVER (Order By 
								CASE
									WHEN @Sort = 'DESC' THEN T.DateCreated END DESC,
								CASE 
									WHEN @Sort = 'ASC' THEN T.DateCreated END ASC
								) as RowRank
			FROM	{databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T INNER JOIN
					{databaseOwner}{objectQualifier}activeforums_Content AS C ON T.ContentId = C.ContentId LEFT OUTER JOIN
					{databaseOwner}{objectQualifier}activeforums_UserProfiles AS P ON C.AuthorId = P.UserId AND P.PortalId = @PortalId AND P.ModuleId = -1
			WHERE     (T.TopicId = @TopicId)
			)
		AS TopicWithRowNumbers
		WHERE RowRank > @RowIndex AND RowRank <= (@RowIndex + @MaxRows)

--Get Attachments
SELECT     ISNULL(A.AttachID,C.AttachId) as AttachId, c.ContentId, A.PostID, A.UserID, ISNULL(C.FileName, A.Filename) as FileName, A.DateAdded, 
		A.DateUpdated, A.FileData, ISNULL(C.ContentType,A.ContentType) as ContentType, A.FileSize, A.AllowDownload, C.FileURL
FROM        {databaseOwner}{objectQualifier}activeforums_Content_Attachments as c LEFT OUTER JOIN
			{databaseOwner}{objectQualifier}activeforums_Attachments AS A on a.attachid = c.attachid inner join
			{databaseOwner}{objectQualifier}vw_activeforums_TopicView AS T ON c.ContentId = T.ContentId
WHERE     (T.TopicId = @TopicId AND (A.AllowDownload = 1 OR A.AllowDownload IS NULL))
--Update View Count
UPDATE {databaseOwner}{objectQualifier}activeforums_Topics SET ViewCount = (ViewCount+1) WHERE TopicId = @TopicId
If @UserId > 0
BEGIN
SELECT @LastPostId = IsNull(LastReplyId,0) FROM {databaseOwner}{objectQualifier}activeforums_ForumTopics WHERE ForumId = @ForumId AND TopicId = @TopicId
exec {databaseOwner}{objectQualifier}activeforums_Forums_Tracking_UpdateUser @ModuleId, @UserId, @ForumId	
SET @LastPostId = IsNull(@LastPostId,0)
exec {databaseOwner}{objectQualifier}activeforums_Topics_Tracking_UpdateUser @ForumId, @TopicId, @LastPostId, @UserId
exec {databaseOwner}{objectQualifier}activeforums_UserProfiles_UpdateActivity @PortalId, @ModuleId, @UserId
END




GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Settings_ListAll] 
	@ModuleId INT
	
AS 
    DECLARE @settings TABLE
        (
          SettingName NVARCHAR(50) ,
          SettingValue NVARCHAR(1000) ,
          GroupKey NVARCHAR(25)
        )
        
    INSERT  INTO @settings
            SELECT  SettingName ,
                    SettingValue,
                    GroupKey
            FROM    {databaseOwner}{objectQualifier}activeforums_Settings
            WHERE   ModuleId = @ModuleId
                    AND SettingName <> 'TIMEZONEOFFSET'
                    
    INSERT  INTO @settings
            SELECT  DISTINCT 'TIMEZONEOFFSET' AS SettingName ,
                    DATEDIFF(MINUTE, GETUTCDATE(), GETDATE()) AS SettingValue,
                    groupkey
			FROM
				{databaseOwner}{objectQualifier}activeforums_Settings
			WHERE   
				ModuleId = @ModuleId
			
    SELECT  *
    FROM    @settings

GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_TP_GetPosts]
@PortalId int,
@Forums nvarchar(1000),
@TopicsOnly bit,
@RandomOrder bit,
@Rows int,
@IgnoreSecurity bit = 0,
@Tags nvarchar(400),
@FilterByUserId int = -1
AS
--SET ROWCOUNT @Rows
IF @RandomOrder = 1 AND @TopicsOnly = 1
	BEGIN
		SELECT * FROM (
		SELECT	g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, T.ForumName, T.ForumId, T.[Subject],
				T.AuthorId, T.AuthorUserName, T.AuthorFirstName, T.AuthorLastName, T.AuthorDisplayName, T.DateCreated,
				T.Body, T.ReplyCount, T.TopicId, "ReplyId" = 0,ROW_NUMBER() OVER (ORDER BY NewID()) as RowRank,
				ISNULL(URL,'') as  TopicURL,
				ISNULL(af.PrefixURL,'') as PrefixURL,
				ISNULL(g.PrefixURL,'') as GroupPrefixURL
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T 
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON T.ForumId = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
		WHERE @Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = t.ModuleId))
		) as posts WHERE RowRank <=@Rows
	END
IF @RandomOrder = 0 AND @TopicsOnly = 1
	BEGIN
		SELECT * FROM (
		SELECT	g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, T.ForumName, T.ForumId, T.[Subject],
				T.AuthorId, T.AuthorUserName, T.AuthorFirstName, T.AuthorLastName, T.AuthorDisplayName, T.DateCreated,
				T.Body, T.ReplyCount, T.TopicId, "ReplyId" = 0,ROW_NUMBER() OVER (ORDER BY T.DateCreated DESC) as RowRank,
				ISNULL(URL,'') as  TopicURL,
				ISNULL(af.PrefixURL,'') as PrefixURL,
				ISNULL(g.PrefixURL,'') as GroupPrefixURL
				
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicsView as T 
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON f.ID = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
		WHERE (@FilterByUserId = -1 OR T.AuthorId = @FilterByUserId)
		AND (@Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = t.ModuleId))
			)
		) as posts WHERE RowRank <=@Rows
	END
IF @RandomOrder = 0 AND @TopicsOnly = 0 
	BEGIN
		SELECT * FROM (
		SELECT g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, AF.ForumName, T.ForumId,
				T.Subject as [Subject], T.AuthorId as AuthorId,
				T.Username AS AuthorUserName, T.FirstName as AuthorFirstName,
				T.LastName AS AuthorLastName, T.DisplayName AS AuthorDisplayName,
				T.DateUpdated AS DateCreated,
				"ReplyCount" = 0, T.TopicId, T.ReplyId,
				c.Body,ROW_NUMBER() OVER (ORDER BY T.DateUpdated DESC) as RowRank,
				ISNULL(URL,'') as  TopicURL,
				ISNULL(af.PrefixURL,'') as PrefixURL,
				ISNULL(g.PrefixURL,'') as GroupPrefixURL
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicView as T
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON T.ForumId = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = T.ContentId
		WHERE (@Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = AF.ModuleId))
			)
		) as Posts WHERE RowRank <= @Rows
	END
IF @RandomOrder = 1 AND @TopicsOnly = 0 
	BEGIN
		SELECT * FROM (
		SELECT g.GroupName, g.ForumGroupId, M.TabId, M.ModuleId, AF.ForumName, T.ForumId,
				T.Subject as [Subject], T.AuthorId as AuthorId,
				T.Username AS AuthorUserName, T.FirstName as AuthorFirstName,
				T.LastName AS AuthorLastName, T.DisplayName AS AuthorDisplayName,
				T.DateUpdated AS DateCreated,
				"ReplyCount" = 0, T.TopicId, T.ReplyId,
				c.Body,ROW_NUMBER() OVER (ORDER BY NEWID() DESC) as RowRank,
				ISNULL(URL,'') as  TopicURL,
				ISNULL(af.PrefixURL,'') as PrefixURL,
				ISNULL(g.PrefixURL,'') as GroupPrefixURL
		FROM {databaseOwner}{objectQualifier}vw_activeforums_TopicView as T
				INNER JOIN {databaseOwner}{objectQualifier}activeforums_Functions_Split(@Forums,':') as F on t.ForumId = F.ID 			
			INNER JOIN {databaseOwner}{objectQualifier}TabModules as M ON T.ModuleId = M.ModuleId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as af ON T.ForumId = af.ForumId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on af.ForumGroupId = g.ForumGroupId
			INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c on c.ContentId = T.ContentId
		WHERE (@Tags = '' OR (@Tags <> '' AND T.TopicId IN (
													SELECT tt.TopicId FROM {databaseOwner}{objectQualifier}activeforums_Tags as tag
													 INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics_Tags as TT ON tag.TagId = tt.TagId 
													WHERE     tag.TagName = @Tags AND tag.Moduleid = AF.ModuleId))
			)
		) as Posts WHERE RowRank <=@Rows
		
	END





GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_ForumContent_List]
@PortalId int,
@ModuleId int,
@ForumGroupId int,
@ForumId int,
@ParentForumId int
AS
BEGIN
SELECT f.*,p.*, IsNULL(g.PrefixURL,'') as GroupPrefixURL from {databaseOwner}{objectQualifier}activeforums_Forums as f 
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as p ON p.PermissionsId = f.PermissionsId
WHERE f.Active = 1 AND f.ForumId = @ParentForumId
END
BEGIN
SELECT f.*,p.*, IsNULL(g.PrefixURL,'') as GroupPrefixURL  from {databaseOwner}{objectQualifier}activeforums_Forums as f 
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g ON g.ForumGroupId = f.ForumGroupId
INNER JOIN {databaseOwner}{objectQualifier}activeforums_Permissions as p ON p.PermissionsId = f.PermissionsId
WHERE f.Active = 1 AND f.ParentForumId = @ParentForumId
END
BEGIN
DECLARE @topics table (categoryid int, topicid int, catpriority int, categoryname nvarchar(255), topicpriority int, topicsort int)
INSERT INTO @topics
SELECT tg.TagId, t.TopicId, tg.Priority, tg.TagName, t.Priority, ft.LastReplyDate from {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Topics as t ON t.TopicId = ft.TopicId INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Topics_Tags as tt ON t.TopicId = tt.TopicId INNER JOIN
{databaseOwner}{objectQualifier}activeforums_Tags as tg ON tg.TagId = tt.TagId AND tg.IsCategory = 1
WHERE t.IsApproved = 1 AND ft.ForumId = @ForumId
SELECT t.*,c.*, tmp.*, ISNULL(g.PrefixURL,'') as GroupPrefixURL, ISNULL(f.PrefixURL,'') as PrefixURL  from @topics tmp
	INNER JOIN {databaseOwner}{objectQualifier}activeforums_Topics as t ON t.TopicId = tmp.topicid 
	INNER JOIN {databaseOwner}{objectQualifier}activeforums_ForumTopics as ft on ft.TopicId = t.TopicId
	INNER JOIN {databaseOwner}{objectQualifier}activeforums_Forums as f on f.ForumId = ft.ForumId
	INNER JOIN {databaseOwner}{objectQualifier}activeforums_Groups as g on g.ForumGroupId = f.ForumGroupId
	INNER JOIN {databaseOwner}{objectQualifier}activeforums_Content as c ON c.ContentId = t.ContentId 
Order By catpriority, categoryname, topicpriority desc, topicsort desc
END




GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_ForumGet
@PortalId int,
@ModuleId int,
@ForumId int
AS 
SELECT     F.ForumId, F.ModuleId, F.ForumGroupId, F.ParentForumId, F.ForumName, F.ForumDesc, F.SortOrder, F.Active, F.Hidden, F.TotalTopics, 
					  F.TotalReplies, F.LastTopicId, F.LastReplyId, F.ForumSettingsKey, F.ForumSecurityKey, G.GroupName, ISNULL(P.ForumName, '') AS ParentForumName, pf.*,
					  InheritSecurity = (CASE WHEN G.PermissionsId = F.PermissionsId THEN 1 ELSE 0 END),
					  ISNULL(F.PrefixURL,'') as PrefixURL,
					  ISNULL(g.PrefixURL,'') as GroupPrefixURL,
					  ISNULL(f.SocialGroupId, -1) as SocialGroupId,
					  f.HasProperties
FROM         {databaseOwner}{objectQualifier}activeforums_Forums AS F INNER JOIN
				{databaseOwner}{objectQualifier}activeforums_Permissions as pf on pf.PermissionsId = f.PermissionsId INNER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Groups AS G ON F.ForumGroupId = G.ForumGroupId LEFT OUTER JOIN
					  {databaseOwner}{objectQualifier}activeforums_Forums AS P ON F.ParentForumId = P.ForumId
					  
WHERE     (F.ForumId = @ForumId)




GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}activeforums_GetForumsForSocialGroup
	@SocialGroupId int
AS

	SELECT ForumId FROM {databaseOwner}{objectQualifier}activeforums_Forums WHERE SocialGroupId = @SocialGroupId AND @SocialGroupId > 0


GO

-- update topics to fill in the new nexttopic and prevtopic fields // could take a few minutes if there are lots of threads
DECLARE @ForumId INT
DECLARE @CurForums CURSOR
SET @CurForums = CURSOR FOR
SELECT DISTINCT f.ForumId 
FROM {databaseOwner}{objectQualifier}activeforums_topics t INNER JOIN {databaseOwner}{objectQualifier}activeforums_forumtopics f ON t.TopicId = f.TopicId
WHERE t.nexttopic = 1
ORDER BY 1 desc


OPEN @CurForums
FETCH NEXT
FROM @CurForums INTO @ForumId
WHILE @@FETCH_STATUS = 0
BEGIN
PRINT @ForumId
EXEC {databaseOwner}[{objectQualifier}activeforums_SaveTopicNextPrev] @forumid
FETCH NEXT
FROM @CurForums INTO @ForumId
END
CLOSE @CurForums
DEALLOCATE @CurForums

GO
INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] (
  [Name],
  [Description],
  [TTL],
  [DesktopModuleID])
VALUES (
  N'AF-ForumModeration',
  N'AF-ForumModeration',
  -1,
  NULL)
GO
DECLARE @NotificationTypeId int
 SET @NotificationTypeId = (SELECT NotificationTypeID from {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] WHERE Name = N'AF-ForumModeration')
INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] (
  [NotificationTypeID],
  [NameResourceKey],
  [DescriptionResourceKey],
  [Order],
  [APICall])
VALUES (
  @NotificationTypeID,
  N'Approve',
  N'ApprovePost',
  1,
  N'DesktopModules/ActiveForums/API/ModerationService.ashx/ApprovePost')
INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] (
  [NotificationTypeID],
  [NameResourceKey],
  [DescriptionResourceKey],
  [Order],
  [APICall])
VALUES (
  @NotificationTypeID,
  N'Reject',
  N'RejectPost',
  2,
  N'DesktopModules/ActiveForums/API/ModerationService.ashx/RejectPost')
INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] (
  [NotificationTypeID],
  [NameResourceKey],
  [DescriptionResourceKey],
  [Order],
  [APICall])
VALUES (
  @NotificationTypeID,
  N'Delete',
  N'DeletePost',
  3,
  N'DesktopModules/ActiveForums/API/ModerationService.ashx/DeletePost')
GO
INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] (
  [Name],
  [Description],
  [TTL],
  [DesktopModuleID])
VALUES (
  N'AF-ContentAlert',
  N'AF-ContentAlert',
  -1,
  NULL)
GO
DECLARE @NotificationTypeId int
 SET @NotificationTypeId = (SELECT NotificationTypeID from {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] WHERE Name = N'AF-ContentAlert')
INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] (
  [NotificationTypeID],
  [NameResourceKey],
  [DescriptionResourceKey],
  [Order],
  [APICall])
VALUES (
  @NotificationTypeID,
  N'Ignore',
  N'IgnorePost',
  1,
  N'DesktopModules/ActiveForums/API/ModerationService.ashx/IgnorePost')
INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] (
  [NotificationTypeID],
  [NameResourceKey],
  [DescriptionResourceKey],
  [Order],
  [APICall])
VALUES (
  @NotificationTypeID,
  N'Delete',
  N'DeletePost',
  2,
  N'DesktopModules/ActiveForums/API/ModerationService.ashx/DeletePost')
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}activeforums_Attachments_SaveToContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_SaveToContent]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}activeforums_Attachments_SaveToContent]
@ContentId int,
@AttachId int,
@FileURL nvarchar(255),
@FileName nvarchar(255),
@DisplayLink bit,
@ContentType nvarchar(100)
AS
BEGIN
	If NOT EXISTS(SELECT ContentId FROM {databaseOwner}{objectQualifier}activeforums_Content_Attachments WHERE ContentId = @ContentId AND AttachId = @AttachId)
	INSERT INTO {databaseOwner}{objectQualifier}activeforums_Content_Attachments (ContentId, AttachId, FileURL, FileName, DisplayLink, ContentType) VALUES (@ContentId, @AttachId, @FileURL, @FileName, @DisplayLink, @ContentType)
		
END

GO


